{
  "title": "SE-Construction: Software Construction",
  "KA Core": "3. Coding style (See also: SDF-Practices)\na. Style guides\nb. Commenting\nc. Naming\n4. “Best Practices” for coding: techniques, idioms/patterns, mechanisms for building quality programs\n(See also: SEC-Coding, SDF-Practices)\na. Defensive coding practices\nb. Secure coding practices and principles\nc. Using exception handling mechanisms to make programs more robust, fault-tolerant\n5. Debugging (See also: SDF-Practices)\n6. Logging\n7. Use of libraries and frameworks developed by others (See also: SDF-Practices)\nNon-Core:\n8. Larger-scale testing\na. Test doubles (stubs, mocks, fakes)\nb. Dependency injection\n9. Work sequencing, including dependency identification, milestones, and risk retirement\na. Dependency identification: Identifying the dependencies between different tasks\nb. Milestones: A collection of tasks that serve as a marker of progress when completed. Ideally,\nthe milestone encompasses a useful unit of functionality.\nc. Risk retirement: Identifying what elements of a project are risky and prioritizing completing tasks\nthat address those risks.\n10. Potential security problems in programs (See also: SEC-Coding)\n245\na. Buffer and other types of overflows\nb. Race conditions\nc. Improper initialization, including choice of privileges\nd. Input validation\n11. Documentation (autogenerated)\n12. Development context: “green field” vs existing code base\na. Change impact analysis\nb. Change actualization\n13. Release management\n14. DevOps practices"
}