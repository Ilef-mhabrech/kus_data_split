{
  "title": "AI-Vision: Perception and Computer Vision",
  "Illustrative Learning Outcomes": "1. Summarize the importance of image and object recognition in AI and indicate several significant\napplications of this technology.\n2. List at least three image-segmentation approaches, such as thresholding, edge-based and region-\nbased algorithms, along with their defining characteristics, strengths, and weaknesses.\n3. Implement 2d object recognition based on contour-based and/or region-based shape\nrepresentations.\n4. Distinguish the goals of sound-recognition, speech-recognition, and speaker-recognition and\nidentify how the raw audio signal will be handled differently in each of these cases.\n5. Provide at least two examples of a transformation of a data source from one sensory domain to\nanother, e.g., tactile data interpreted as single-band 2d images.\n6. Implement a feature-extraction algorithm on real data, e.g., an edge or corner detector for images\nor vectors of Fourier coefficients describing a short slice of audio signal.\n7. Implement an algorithm combining features into higher-level percepts, e.g., a contour or polygon\nfrom visual primitives or phoneme hypotheses from an audio signal.\n8. Implement a classification algorithm that segments input percepts into output categories and\nquantitatively evaluates the resulting classification.\n9. Evaluate the performance of the underlying feature-extraction, relative to at least one alternative\npossible approach (whether implemented or not) in its contribution to the classification task (8),\nabove.\n82\n10. Describe at least three classification approaches, their prerequisites for applicability, their strengths,\nand their shortcomings.\n11. Implement and evaluate a deep learning solution to problems in computer vision, such as object or\nscene recognition.\nProfessional Dispositions\n● Meticulousness: Since attention must be paid to details when implementing AI and machine\nlearning algorithms, students must be meticulous about detail.\n● Persistence: AI techniques often operate in partially observable environments and optimization\nprocesses may have cascading errors from multiple iterations. Getting AI techniques to work\npredictably takes trial and error, and repeated effort. These call for persistence on the part of the\nstudent.\n● Inventive: Applications of AI involve creative problem formulation and application of AI techniques,\nwhile balancing application requirements and societal and ethical issues.\n● Responsible: Applications of AI can have significant impacts on society, affecting both individuals\nand large populations. This calls for students to understand the implications of work in AI to society,\nand to make responsible choices for when and how to apply AI techniques.\nMathematics Requirements\nRequired:\n● Algebra\n● Precalculus\n● Discrete Math (See also: MSF-Discrete)\no sets, relations, functions, graphs\no predicate and first-order logic, logic-based proofs\n● Linear Algebra (See also: MSF-Linear)\no Matrix operations, matrix algebra\no Basis sets\n● Probability and Statistics (See also: MSF-Statistics)\no Basic probability theory, conditional probability, independence\no Bayes theorem and applications of Bayes theorem\no Expected value, basic descriptive statistics, distributions\no Basic summary statistics and significance testing\no All should be applied to real decision-making examples with real data, not “textbook”\nexamples.\nDesirable:\n● Calculus-based probability and statistics\n● Calculus: single-variable and partial derivatives\n● Other topics in probability and statistics\no Hypothesis testing, data resampling, experimental design techniques\n● Optimization\n● Linear algebra (all other topics)\n83\nCourse Packaging Suggestions\nArtificial Intelligence to include the following:\n● AI-Introduction (4 hours)\n● AI-Search (9 hours)\n● AI-KRR (4 hours)\n● AI-ML (12 hours)\n● AI-Probability (5 hours)\n● AI-SEP (4 hours –integrated throughout the course)\nPrerequisites:\n● SDF-Fundamentals\n● SDF-Data-Structures\n● SDF-Algorithms\n● MSF-Discrete\n● MSF-Probability\nCourse objective: A student who completes this course should understand the basic areas of AI and\nbe able to understand, develop, and apply techniques in each. They should be able to solve problems\nusing search techniques, basic Bayesian reasoning, and simple machine learning methods. They\nshould understand the various applications of AI and associated ethical and societal implications.\nMachine Learning to include the following:\n● AI-ML (32 hours)\n● AI-KRR (4 hours)\n● AI-NLP (4 hours – selected topics, e.g., TF-IDF, bag of words, and text classification)\n● AI-SEP (4 hours – should be integrated throughout the course)\nPrerequisites:\n● SDF-Fundamentals\n● SDF-Data-Structures\n● SDF-Algorithms\n● MSF-Discrete\n● MSF-Probability\n● MSF-Statistics\n● MSF-Linear (optional)\nCourse objective: A student who completes this course should be able to understand, develop, and\napply mechanisms for supervised, unsupervised, and reinforcement learning. They should be able to\nselect the proper machine learning algorithm for a problem, preprocess the data appropriately, apply\nproper evaluation techniques, and explain how to interpret the resulting models, including the model's\nshortcomings. They should be able to identify and compensate for biased data sets and other sources\nof error and be able to explain ethical and societal implications of their application of machine learning\nto practical problems.\nRobotics to include the following:\n● AI-Robotics (25 hours)\n84\n● SPD-Robot (4 hours – focusing on hardware, constraints/considerations, and software\narchitectures; other topics in SPD/Robot Platforms that overlap with AI/Robotics)\n● AI-Search (4 hours – selected topics well-integrated with robotics, e.g., A* and path search)\n● AI-ML (6 hours – selected topics well-integrated with robotics, e.g., neural networks for object\nrecognition)\n● AI-SEP (3 hours – integrated throughout the course; robotics is already a huge application, so\nthis really should focus on societal impact and specific robotic applications).\nPrerequisites:\n● SDF-Fundamentals\n● SDF-Data-Structures\n● SDF-Algorithms\n● MSF-Linear\nCourse objective: A student who completes this course should be able to understand and use robotic\ntechniques to perceive the world using sensors, localize the robot based on features and a map, and\nplan paths and navigate in the world in simple robot applications. They should understand and be able\nto apply simple computer vision, motion planning, and forward and inverse kinematics techniques.\nIntroduction to Data Science to include the following:\n● GIT-Visualization (6 hours) – types of visualization, libraries, foundations\n● GIT-SEP (2 hours) – ethically responsible visualization\n● DM-Core (2 hours) – Parallel and distributed processing (MapReduce, cloud frameworks, etc.)–\n● DM-Modeling (2 hours) – Graph representations, entity resolution\n● DM-Querying (4 hours) – SQL, query formation\n● DM-NoSQL (2 hours) – Graph DBs, data lakes, data consistency\n● DM-Security (2 hours) – privacy, personally identifying information and its protection\n● DM-Analytics (1 hour) – exploratory data techniques, data science lifecycle\n● DM-SEP (2 hours) – Data provenance\n● AI-ML (15 hours) – Data preprocessing, missing data imputation, supervised/semi-\nsupervised/unsupervised learning, text analysis, graph analysis and PageRank, experimental\nmethodology, evaluation, and ethics\n● AI-SEP (3 hours) – Applications specific to data science, interspersed throughout the course\n● MSF-Statistics (3 hours) – Statistical analysis, hypothesis testing, experimental design\nPrerequisites:\n● SDF-Fundamentals\nCourse objective: A student who completes this course should be able to formulate questions as data\nanalysis problems, understand and use statistical techniques to achieve that analysis from real data,\napply visualization techniques to convey the results, and analyze the ethical and societal implications of\ndata science applications. Students should also be able to understand and effectively use data\nmanagement techniques for preprocessing, storage, security, and retrieval of data in current systems.\nCommittee\nChair: Eric Eaton, University of Pennsylvania, Philadelphia, PA, USA\n85\nMembers:\n● Zachary Dodds, Harvey Mudd College, Claremont, CA, USA\n● Susan L. Epstein, Hunter College and The Graduate Center of The City University of New York,\nNew York, NY, USA\n● Laura Hiatt, US Naval Research Laboratory, Washington, DC, USA\n● Amruth N. Kumar, Ramapo College of New Jersey, Mahwah, NJ, USA\n● Peter Norvig, Google, Mountain View, CA, USA\n● Meinolf Sellmann, GE Research, Niskayuna, NY, USA\n● Reid Simmons, Carnegie Mellon University, Pittsburgh, PA, USA\nContributors:\n● Nate Derbinsky, Northeastern University, Boston, MA, USA\n● Eugene Freuder, Insight Centre for Data Analytics, University College Cork, Cork, Ireland\n● Ashok Goel, Georgia Institute of Technology, Atlanta, GA, USA\n● Claudia Schulz, Thomson Reuters, Zurich, Switzerland\n86\nAlgorithmic Foundations (AL)\nPreamble\nAlgorithms and data structures are fundamental to computer science, since every theoretical\ncomputation and applied program consists of algorithms that operate on data elements possessing\nsome underlying structure. Selecting appropriate computational solutions to real-world problems\nbenefits from understanding the theoretical and practical capabilities and limitations of available\nalgorithms and paradigms, including their impact on the environment and society. Moreover, this\nunderstanding provides insight into the intrinsic nature of computation, computational problems, and\ncomputational problem-solving as well as possible solution techniques independent of programming\nlanguage, programming paradigm, computer hardware, or other implementation aspects.\nThis knowledge area focuses on the nature of computation including the concepts and skills required to\ndesign and analyze algorithms for solving real-world computational problems. It complements the\nimplementation of algorithms and data structures found in the Software Development Foundations\n(SDF) knowledge area. As algorithms and data structures are essential in all advanced areas of\ncomputer science, this area provides the algorithmic foundations that every computer science graduate\nis expected to know. Exposure to the breadth of these foundational AL topics is designed to provide\nstudents with the basis for studying these topics in more depth, for studying additional computation and\nalgorithm topics, and for learning advanced algorithms across a variety of CS knowledge areas and\nCS+X disciplines.\nChanges since CS2013\nThis area has been renamed from Algorithms and Complexity to better reflect its foundational scope\nsince topics in this area focus on the practical and theoretical foundations of algorithms, complexity,\nand computability. These topics also provide the foundational prerequisites for advanced study in\ncomputer science. Additionally, topics focused on complexity and computability have been cleanly\nseparated into respective knowledge units. To reinforce the important impact of computation on society,\na Society, Ethics, and the Profession (AL-SEP) knowledge unit has been added with the expectation\nthat SEP implications be addressed in some manner during every lecture hour of focus in this AL\nknowledge area.\nThe increase of four CS Core hours acknowledges the importance of this foundational area in the CS\ncurriculum and returns it to the 2001 level (less than one course). Despite this increase, there is a\nsignificant overlap in hours with the Software Development Fundamentals (SDF) and Mathematical\nFoundations (MSF) areas. There is also a complementary nature of the units in this area since, for\nexample, while linear search of an array covers topics in AL-Foundational, it can be used to\nsimultaneously explain AL-Complexity O(n) and AL-Strategies Brute-Force topics.\nThe KA topics and hours primarily reflect topics studied in a stand-alone computational theory course\nand the availability of additional hours when such a course is included in the curriculum.\n87\nCore Hours\nKnowledge Unit CS Core KA Core\nFoundational Data Structures and Algorithms 11 6\nAlgorithmic Strategies 6\nComplexity Analysis 6 3\nComputational Models and Formal Languages 9 23\nSociety, Ethics, and the Profession Included in SEP hours\nTotal 32 32\nThe 11 CS Core hours in Foundational Data Structures and Algorithms are in addition to 9\nhours counted in SDF and 3 hours counted in MSF.\nKnowledge Units"
}