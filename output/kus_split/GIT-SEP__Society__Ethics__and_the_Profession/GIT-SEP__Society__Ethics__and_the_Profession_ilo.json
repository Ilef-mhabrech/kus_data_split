{
  "title": "GIT-SEP: Society, Ethics, and the Profession",
  "Illustrative Learning Outcomes": {
    "KA Core": "165\n1. Discuss the security issues inherent in location tags.\n2. Describe the ethical pitfalls of facial recognition. Can facial recognition be used ethically? If so,\nhow?\n3. Discuss the copyright issues of using watermarked images to train a neural network.\nProfessional Dispositions\n● Self-directed: Graphics hardware and software evolves rapidly. Students need to understand the\nimportance of being a life-long learner.\n● Collaborative: Graphics developers typically work in diverse teams composed of people with\ndisparate subject matter expertise. Students should understand the value of being a good team\nmember, and their teamwork skills should be cultivated and evaluated with constructive feedback.\n● Effective communicator: Communication is critical. Students’ technical communication—verbal,\nwritten, and in code—should be practiced and evaluated.\n● Creative: Creative problem-solving lies at the core of computer graphics.\nMathematics Requirements\nRequired:\n1. Coordinate geometry\n2. Trigonometry\n3. MSF-Linear*\na. Points (coordinate systems & homogeneous coordinates), vectors, and matrices\nb. Vector operations: addition, scaling, dot and cross products\nc. Matrix operations: addition, multiplication, determinants\nd. Affine transformations\n4. MSF-Calculus*\na. Continuity\n*Note, if students enroll in a graphics class without linear algebra or calculus, graphics faculty can teach\nwhat is needed. To wit, many graphics textbooks cover the requisite mathematics in the appendix.\nDesirable:\n1. MSF-Linear\na. Eigenvectors and Eigen decomposition\nb. Gaussian elimination and lower upper factorization\nc. Singular value decomposition\n2. MSF-Calculus\na. Quaternions\nb. Differentiation\nc. Vector calculus\nd. Tensors\ne. Differential geometry\n3. MSF-Probability\n166\n4. MSF-Statistics\n5. MSF-Discrete\na. Numerical methods for simulation\nNecessary and Desirable Data Structures:\n1. Data Structures necessary for this knowledge area (See also: AL-Foundational, SDF-Algorithms,\nSDF-Data-Structures)\na. Directed Acyclic Graphs\nb. Tuples (points / vectors / matrices of fixed dimension)\nc. Dense 1D, 2D, 3D arrays.\n2. Data Structures desirable for this knowledge area (See also: AL-Foundational, SDF-Algorithms,\nSDF-Data-Structures, SDF-Practices)\na. Array Structures and Structure of Arrays\nb. Trees (e.g., K-trees, quadtrees, Huffman Trees)\nCourse Packaging Suggestions\nInteractive Computer Graphics to include the following:\n● GIT-Rendering (20 hours)\n● GIT-Modeling (6 hours)\n● GIT-Interaction (4 hours)\n● SEP-Professional-Ethics, SEP-DEIA (3 hours)\nPrerequisites:\n● AL-Foundational\n● AL-Strategies\n● SDF-Algorithms\n● SDF-Data-Structures\n● SDF-Practices\n● MSF-Linear as a prerequisite or cover relevant topics in class\nCourse objectives: Students should understand and be able to create basic computer graphics using\nan API. They should know how to position and orient models, the camera, and distant and local lights.\nNote: depending on the instructor, this course can be customized to include topics from another\ngraphics knowledge unit, for example a two-week unit on image processing or advanced rendering.\nMedia Computation to include the following:\n● GIT-Fundamentals (4 hours)\n● GIT-Rendering (6 hours)\n● GIT-Interaction (3 hours)\n● SDF-Fundamentals (10 hours)\n● AL-Foundational (7 hours)\n● HCI-User (5 hours)\n● GIT-SEP (4 hours)\nCourse objectives: In this introductory programming class, students should be able to explain,\nevaluate, and apply algorithms and arrays that use and produce digital media.\n167\nUser-Centered Development to include the following:\n● GIT-Fundamentals (4 hours)\n● GIT-Rendering (6 hours)\n● GIT-Interaction (3 hours)\n● HCI-User (8 hours)\n● HCI-Accessibility (3 hours)\n● HCI-SEP (4 hours)\n● SE-Construction (4 hours)\n● SPD-Web, SPD-Game, SPD-Mobile (8 hours)\nStudents should be able to develop applications that are usable and useful for people.\nGraphical user interface (GUI) designs will be implemented and analyzed using rapid\nprototyping.\nTangible Computing to include the following:\n● GIT-Physical (14 hours)\n● GIT-Interaction (4 hours)\n● SPD-Embedded (10 hours)\n● HCI-User (3 hours)\n● HCI-Design (3 hours)\n● SEP-Privacy and SEP-DEIA (3 hours)\nPrerequisites:\n● AL-Foundational\nCourse objectives: Students should be able to use human-centered design to build circuits and\nprogram a networked microcontroller. Additionally, they will learn to work with real time sensors and\nunderstand polarity, Ohm’s law, and how to work with electronics safely.\nImage Processing to include the following:\n● GIT-Image (20 hours)\n● GIT-Interaction (4 hours)\n● SEP-Privacy, SEP-DEIA and SEP-IP (3 hours)\nPrerequisites:\n● AL-Foundational\n● AL-Strategies\n● SDF-Algorithms\n● SDF-Data-Structures\n● SDF-Practices\nCourse objectives: Students should understand and be able to appropriately acquire, process,\ndisplay, and save digital images.\nData Visualization to include the following:\n● GIT-Visualization (20 hours)\n● GIT-Interaction (4 hours)\n● GIT-Fundamentals (4 hours)\n168\n● HCI-User (3 hours)\n● HCI-Design (3 hours)\n● SEP-Privacy, SEP-DEIA, and SEP-Professional-Ethics (3 hours)\nPrerequisites:\n● AL-Foundational\n● AL-Strategies\n● SDF-Algorithms\n● SDF-Data-Structures\n● SDF-Practices\n● MSF-Probability\n● MSF-Statistics\nCourse objectives: Students should understand how to select a dataset; ensure the data are accurate\nand appropriate; design, develop and test a usable visualization program that depicts the data; and be\nable to read and evaluate existing visualizations.\nSimulation to include the following:\n● GIT-Simulation (10 hours)\n● GIT-Rendering (15 hours)\n● GIT-Shading: (6 hours)\n● SEP-Professional-Ethics (3 hours)\nPrerequisites:\n● AL-Foundational\n● AL-Strategies\n● SDF-Algorithms\n● SDF-Data-Structures\n● SDF-Practices\n● MSF-Linear as a prerequisite or cover relevant topics in class\n● MSF-Probability\nCourse objectives: Students should understand and be able to create directable simulations, both of\nphysical and non-physical systems.\nIntroduction to AR and VR to include the following:\n● GIT-Immersive (15 hours)\n● GIT-Fundamentals (4 hours)\n● GIT-Interactive (8 hours)\n● SEP-Privacy, SEP-DEIA, and SEP-Professional-Ethics (3 hours)\nCourse objectives: Students should understand and be able to develop VR and AR applications.\nComputer Animation to include the following:\n● GIT-Animation (30 hours)\n● SEP-Privacy, SEP-DEIA, and SEP-Professional-Ethics (3 hours)\nPrerequisites:\n● Interactive Computer Graphics course\n169\nCourse objectives: Students should understand and be able to create short animations employing the\nprinciples of animation.\nLighting and Shading to include the following:\n● GIT-Shading (12 hours)\n● GIT-Modeling (6 hours)\n● GIT-Interaction (4 hours)\n● SEP-IP, SEP-DEIA, and SEP-Professional-Ethics (3 hours)\nPrerequisites:\n● Interactive Computer Graphics course\nCourse objectives: Students should be able to create realistic and non-photorealistic lighting and\nunderstand the underlying theory of shading and lighting.\nCommittee\nChair: Susan Reiser, University of North Carolina Asheville, Asheville, NC, USA\nMembers:\n● Erik Brunvand, University of Utah, Salt Lake City, UT, USA\n● Kel Elkins, NASA/GSFC Scientific Visualization Studio, Greenbelt, MD, USA\n● Jeff Lait, SideFX, Toronto, Canada\n● Amruth Kumar, Ramapo College, Mahwah, NJ, USA\n● Paul Mihail, Valdosta State University, Valdosta, GA, USA\n● Tabitha Peck, Davidson College, Davidson, NC, USA\n● Ken Schmidt, NOAA NCEI, Asheville, NC, USA\n● Dave Shreiner, UnityTechnologies & Sonoma State University, San Francisco, CA, USA\nContributors:\n● Ginger Alford, Southern Methodist University, University Park, TX, USA\n● Christopher Andrews, Middlebury College, Middlebury, VT, USA\n● A. J. Christensen, NASA/GSFC Scientific Visualization Studio – SSAI, Champaign, IL, USA\n● Roger Eastman, University of Maryland, College Park, MD, USA\n● Ted Kim, Yale University, New Haven, CT, USA\n● Barbara Mones, University of Washington, Seattle, WA, USA\n● Greg Shirah, NASA/GSFC Scientific Visualization Studio, Greenbelt, MD, USA\n● Beatriz Sousa Santos, University of Aveiro, Portugal\n● Anthony Steed, University College, London, UK\n170\nReferences\n1. Jon Quast, Clay Bruning, and Sanmeet Deo. \"Markets: This Opportunity for Investors Is Bigger\nThan Movies and Music Combined.\" https://www.nasdaq.com/articles/this-opportunity-for-investors-\nis-bigger-than-movies-and-music-combined-2021-10-03. Accessed March 2024.\n171\n172\nHuman-Computer Interaction (HCI)\nPreamble\nComputational systems not only enable users to solve problems, but also foster social connectedness\nand support a broad variety of human endeavors. Thus, these systems should work well with their\nusers and solve problems in ways that respect individual dignity, social justice, and human values and\ncreativity. Human-computer interaction (HCI) addresses those issues from an interdisciplinary\nperspective that includes computer science, psychology, business strategy, and design principles.\nEach user is different and, from the perspective of HCI, the design of every system that interacts with\npeople should anticipate and respect that diversity. This includes not only accessibility, but also cultural\nand societal norms, neural diversity, modality, and the responses the system elicits in its users. An\neffective computational system should evoke trust while it treats its users fairly, respects their privacy,\nprovides security, and abides by ethical principles.\nThese goals require design-centric engineering that begins with intention and with the understanding\nthat design is an iterative process, one that requires repeated evaluation of its usability and its impact\non its users. Moreover, technology evokes user responses, not only by its output, but also by the\nmodalities with which it senses and communicates. This knowledge area heightens the awareness of\nthese issues and should influence every computer scientist.\nChanges since CS2013\nDriven by this broadened perspective, the HCI knowledge area has revised the CS2013 document in\nseveral ways:\n● Knowledge units have been renamed and reformulated to reflect current practice and to anticipate\nfuture technological development.\n● There is increased emphasis on the nature of diversity and the centrality of design focused on the\nuser.\n● Modality (e.g., text, speech) is still emphasized given its key role throughout HCI, but with a\nreduced emphasis on specific modalities in favor of a more timely and empathetic approach.\n● The curriculum reflects the importance of understanding and evaluating the impacts and\nimplications of a computational system on its users, including issues in ethics, fairness, trust, and\nexplainability.\n● Given its extensive interconnections with other knowledge areas, we believe HCI is itself a cross-\ncutting knowledge area with connections to Artificial Intelligence, Graphics and Interactive\nTechniques, Software Development Fundamentals, Software Engineering, and Society, Ethics, and\nthe Profession.\n173\nCore Hours\nKnowledge Unit CS Core KA Core\nUnderstanding the User 2 5\nAccountability and Responsibility in Design 2 2\nAccessibility and Inclusive Design 2 2\nEvaluating the Design 1 2\nSystem Design 1 5\nSociety, Ethics, and the Profession Included in SEP hours\nTotal Hours 8 16\nKnowledge Units"
  }
}