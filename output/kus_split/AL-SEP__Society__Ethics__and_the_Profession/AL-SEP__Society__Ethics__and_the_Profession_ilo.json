{
  "title": "AL-SEP: Society, Ethics, and the Profession",
  "Illustrative Learning Outcomes": {
    "CS Core": "1. Develop algorithmic solutions to real-world societal problems, such as routing an ambulance to a\nhospital.\n2. Explain the impact that an algorithm may have on the environment and society when used to solve\na real-world problem while considering its sustainability and that it can affect different societal\ngroups in different ways.\n3. Prepare a presentation that justifies the selection of appropriate data structures and/or algorithms to\nsolve a given real-world problem.\n4. Explain an example that articulates how differential privacy protects knowledge of an individual’s\ndata.\n5. Explain the environmental impacts of design choices that relate to algorithm design.\n6. Explain the tradeoffs involved in proof-of-work and proof-of-stake algorithms.\n95\nProfessional Dispositions\n● Meticulous: As an algorithm is a formal solution to a computational problem, attention to detail\nis important when developing and combining algorithms.\n● Persistent: As developing algorithmic solutions to computational problems can be challenging,\ncomputer scientists must be resolute in pursuing such solutions.\n● Inventive: As computer scientists develop algorithmic solutions to real-world problems, they\nmust be inventive in developing solutions to these problems.\nMathematics Requirements\nRequired:\n● MSF-Discrete\nCourse Packaging Suggestions\nAs depicted in the following figure, the committee envisions two common approaches for addressing\nfoundational AL topics in CS courses. Both approaches included the required introductory\nProgramming (CS1) and Data Structures (CS2) courses. In a three-course approach, all CS Core\ntopics are covered with additional unused hours to cover other topics. Alternatively, in the four-course\napproach, the AL-Model knowledge unit CS and KA Core topics are addressed in a Computational\nTheory focused course, which leaves room to address additional KA topics in the third Algorithms\ncourse. Both approaches assume Big-O analysis is introduced in the Data Structures (CS2) course and\nthat graphs are taught in the third Algorithms course. The committee recognizes that there are many\ndifferent approaches for packaging AL topics into courses including, for example, introducing graphs in\nCS2 Data Structures, backtracking in an AI course, and AL-Model topics in a theory course that also\naddresses, for instance, FPL topics. The given example is simply one way to cover the entire AL CS\nCore in three introductory courses with additional lecture hours to spare.\nCourses Common to Three and Four Course Exemplars\nProgramming 1 (CS1)\n● AL-Foundational (2 hours)\n○ Arrays and Strings\n○ Search Algorithms (e.g., O(n) Linear Search)\n96\n● AL-SEP (In SEP hours)\nNote: the following AL topics are demonstrated in CS1, but not explicitly taught as such:\n● AL-Strategies (less than hour)\n○ Brute Force (e.g., linear search)\n○ Iteration (e.g., linear search)\n● AL-Complexity (less than 1 hour)\n○ Foundational Complexity Classes\n■ O(1) Constant and O(n) Linear runtime complexities\nCourse objectives: Students should be able to explain, evaluate, and apply arrays in a variety of\nproblem-solving contexts including using linear search for elements in an array. They should also be\nable to begin to explain the impact algorithmic design and use has on society.\nData Structures (CS2)\n● AL-Foundational (12 hours)\n○ Abstract Data Types and Operations (ADTs)\n○ Binary Search\n○ Multi-dimensional Arrays\n○ Linked Lists\n○ Hash Tables/Maps including conflict resolution strategies\n○ Records/Structs/Tuples and Objects\n○ Sets\n○ Stacks, Queues, and Deques\n○ Trees: Binary, Ordered, Breadth- and Depth-first search\n○ Search Algorithms (e.g., O(n2) Selection Sort, O(log n) binary search)\n2\n○ Sorting Algorithms (e.g., O(n log n) Mergesort, O(log n) tree search)\nb\n● AL-Strategies (3 hours)\n○ Brute Force (e.g., selection sort)\n○ Decrease-and-Conquer (e.g., depth/breadth tree search)\n○ Divide-and-Conquer (e.g., mergesort, quicksort)\n○ Iteration vs Recursion (e.g., factorial, tree search)\n○ Space vs Time tradeoff (e.g., hashing)\n● AL-Complexity (3 hours)\n○ Complexity Analysis Framework\n○ Foundational Complexity Classes\n■ O(log n) Logarithmic, O(n log n) Log Linear, and O(n2) Quadratic\n2 2\n○ Time and Space Tradeoffs in Algorithms\n● AL-SEP (In SEP hours)\nCourse objectives: Students should be able to explain, evaluate, and apply the specified data\nstructures and algorithms in a variety of problem-solving contexts. Additionally, they should be able\ndemonstrate the use of different data structures, algorithms, and algorithmic strategies (paradigms) to\n97\nsolve the same problem. Also, they will continue to enhance and refine their understanding of the\nimpact that algorithmic design and use has on society.\nThree Course Exemplar Approach\nAlgorithms-C\n● AL-Foundational (3 hours)\n○ Graphs including Graph Algorithms\n● AL-Complexity (3 hours)\n○ Asymptotic Complexity Analysis\n○ Foundational Complexity Classes\n■ O(2n) Exponential and O(n!) Factorial\n○ Empirical Measurements of Performance\n○ Tractability and Intractability\n● AL-Strategies (3 hours)\n○ Brute Force (e.g., traveling salesperson, knapsack)\n○ Decrease-and-Conquer (e.g., topological sort)\n○ Divide-and-Conquer (e.g., Strassen’s)\n○ Greedy (e.g., Dijkstra’s, Kruskal’s)\n○ Transform-and-Conquer/Reduction (e.g., heapsort, trees (2-3, AVL, Red-Black))\n■ Dynamic Programming (e.g., Warshall’s, Floyd’s, Bellman-Ford)\n○ Handling Exponential Growth (e.g., heuristic A*, branch-and-bound, backtracking)\n● AL-Models (9 hours)\n○ All CS Core topics\n● AL-SEP (In SEP hours)\nCourse objectives: Students should be able to explain, evaluate, and apply the specified data\nstructures and algorithms in a variety of problem-solving contexts. Additionally, they should be able to\nformally explain complexity analysis and the importance of tractability including approaches for handling\nintractable problems. Finally, they should also be able to summarize formal models of computation,\ngrammars, and languages including the definition of a computer as a Turing Machine and the\nundecidability of the Halting problem.\nFour Course Exemplar Approach\nAlgorithms-C (third course)\n● AL-Foundational (3 hours)\n○ Graphs including Graph Algorithms\n○ Sorting Algorithms\n■ O(n log n) heapsort\n■ Pseudo O(n) complexity (e.g., bucket, counting, radix)\n○ Graph Algorithms\n■ Transitive closure (e.g., Warshall’s)\n■ Topological sort\n○ Matching\n■ Efficient String Matching (e.g., Boyer-Moore, Knuth-Morris-Pratt)\n98\n■ Longest common subsequence matching\n■ Regular expression matching\n● AL-Complexity (3 hours)\n○ Asymptotic Complexity Analysis\n○ Foundational Complexity Classes\n■ O(2n) Exponential and O(n!) Factorial\n○ Empirical Measurements of Performance\n○ Tractability and Intractability\n● AL-Strategies (3 hours)\n○ Brute Force (e.g., traveling salesperson, knapsack)\n○ Decrease-and-Conquer (e.g., topological sort)\n○ Divide-and-Conquer (e.g., Strassen’s algorithm)\n○ Greedy (e.g., Dijkstra’s, Kruskal’s)\n○ Transform-and-Conquer/Reduction (e.g., heapsort, trees (2-3, AVL, Red-Black))\n■ Dynamic Programming (e.g., Warshall’s, Floyd’s, Bellman-Ford)\n○ Handling Exponential Growth (e.g., heuristic A*, branch-and-bound, backtracking)\nCourse objectives: Students should be able to explain, evaluate, and apply the specified data\nstructures and algorithms in a variety of problem-solving contexts. Additionally, they should be able to\nformally explain complexity analysis and the importance of tractability including approaches for handling\nintractable problems.\nComputation Theory (fourth course)\n● AL-Complexity (3 hours)\n○ Turing Machine-based models of complexity (P, NP, and NP-C classes)\n○ Space complexity (NSpace, PSpace Savitch’ Theorem)\n● AL-Models (29 hours)\n○ All CS and KA Core topics\n● AL-SEP (In SEP hours)\nCourse objectives: Students should be able to explain, evaluate, and apply models of computation,\ngrammars, and languages. Additionally, they should be able to explain formal proofs that demonstrate\nthe capability and limitations of various automata. Students should be able to relate the complexity of\nRandom Access Models of Computation to Turing Machine models. Finally, students should be able to\nsummarize decidability and reduction proofs.\nCommittee\nChair: Richard Blumenthal, Regis University, Denver, CO, USA\nMembers:\n● Cathy Bareiss, Bethel University, Mishawaka, MN, USA\n● Tom Blanchet, SciTec, Inc., Boulder, CO, USA\n● Doug Lea, State University of New York at Oswego, Oswego, NY, USA\n99\n● Sara Miner More, John Hopkins University, Baltimore, MD, USA\n● Mia Minnes, University of California San Diego, San Diego, CA, USA\n● Atri Rudra, University at Buffalo, Buffalo, NY, USA\n● Christian Servin, El Paso Community College, El Paso, TX, USA\n100\nArchitecture and Organization (AR)\nPreamble\nComputing professionals spend considerable time writing efficient code to solve a particular problem in\nan application domain. As the shift from sequential to parallel processing occurs, a deeper understanding\nof the underlying computer architectures is necessary. Architecture can no longer be viewed as a black\nbox where principles from one architecture can be applied to another. Instead, programmers should look\ninside the black box and use specific components to enhance system performance and energy efficiency.\nThe Architecture and Organization (AR) knowledge area aims to develop a deeper understanding of the\nhardware environments upon which almost all computing is based, and the relevant interfaces provided\nto higher software layers. The target hardware comprises low-end embedded system processors up to\nhigh-end enterprise multiprocessors.\nThe topics in this knowledge area will benefit students by enabling them to appreciate the fundamental\narchitectural principles of modern computer systems, including the challenge of harnessing parallelism\nto sustain performance and energy improvements into the future. This KA will help computer science\nstudents depart from the black box approach and become more aware of the underlying computer system\nand the efficiencies specific architectures can achieve.\nChanges since CS2013\nChanges and additions are summarized as follows.\n● Topics have been revised, particularly AR/Memory Hierarchy and AR/Performance and Energy\nEfficiency. This update brings recent advances in memory caching and energy consumption.\n● The newly created AR/Heterogeneous Architectures covers emerging topics in Computer\nArchitecture: Processing In-Memory (PIM) and domain-specific architectures (e.g., neural\nnetwork processors).\n● The new AR/Quantum Architectures offers a \"toolbox\" covering introductory topics in quantum\ncomputing.\n● Knowledge units have been merged to better deal with overlaps:\n● AR/Multiprocessing and Alternative Architectures were merged into newly created\nAR/Heterogeneous Architectures.\n● The new AR/Secure Processor Architectures covers hardware support for multi-stack security\napplications.\nCore Hours\nKnowledge Unit CS Core KA Core\nDigital Logic and Digital Systems 2 + 1 (SF)\n101\nMachine-Level Data Representation 1\nAssembly Level Machine Organization 1 1 + 1 (PDC)\nMemory Hierarchy 4+2 (OS)\nInterfacing and Communication 1\nFunctional Organization 2\nPerformance and Energy Efficiency 3\nHeterogeneous Architectures 2\nSecure Processor Architectures 2\nQuantum Architectures 2\nSustainability Issues Included in SEP hours\nTotal 9 16\nThe hours shared with OS include overlapping topics and are counted here.\nKnowledge Units"
  }
}