{
  "title": "SE-Refactoring: Refactoring and Code Evolution",
  "KA Core": "1. Hyrum’s Law/The Law of Implicit Interfaces\n2. Backward compatibility\na. Compatibility is not a property of a single entity, it’s a property of a relationship.\nb. Backward compatibility needs to be evaluated in terms of provider + consumer(s) or with a well-\nspecified model of what forms of compatibility a provider aspires to/promises.\n3. Refactoring\na. Standard refactoring patterns (rename, inline, outline, etc.)\nb. Use of refactoring tools in IDE\nc. Application of static-analysis tools (to identify code in need of refactoring, generate changes,\netc.)\nd. Value of refactoring as a remedy for technical debt\n4. Versioning\na. Semantic Versioning (SemVer)\nb. Trunk-based development\nNon-Core:\n5. “Large Scale” Refactoring – techniques when a refactoring change is too large to commit safely\n(large projects), or when it is impossible to synchronize change between provider + all consumers\n(multiple repositories, consumers with private code).\na. Express both old and new APIs so that they can co-exist.\nb. Minimize the size of behavior changes.\n249\nc. Why these techniques are required, (e.g., “API consumers I can see” vs “consumers I can’t\nsee”)."
}