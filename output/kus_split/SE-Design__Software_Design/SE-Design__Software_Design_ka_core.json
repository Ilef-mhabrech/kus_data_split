{
  "title": "SE-Design: Software Design",
  "KA Core": "5. API design principles\na. Consistency\ni. Consistent APIs are easier to learn and less error-prone\nii. Consistency is both internal (between different portions of the API) and external (following\ncommon API patterns)\nb. Composability\nc. Documenting contracts\ni. API operations should describe their effect on the system, but not generally their\nimplementation\nii. Preconditions, postconditions, and invariants\n243\nd. Expandability\ne. Error reporting\ni. Errors should be clear, predictable, and actionable\nii. Input that does not match the contract should produce an error\niii. Errors that can be reliably managed without reporting should be managed\n6. Identifying and codifying data invariants and time invariants\n7. Structural and behavioral models of software designs\n8. Data design (See also: DM-Modeling)\na. Data structures\nb. Storage systems\n9. Requirement traceability\na. Understanding which requirements are satisfied by a design\nNon-Core:\n10. Design modeling, for instance with class diagrams, entity relationship diagrams, or sequence\ndiagrams\n11. Measurement and analysis of design quality\n12. Principles of secure design and coding (See also: SEC-Engineering)\na. Principle of least privilege\nb. Principle of fail-safe defaults\nc. Principle of psychological acceptability\n13. Evaluating design tradeoffs (e.g., efficiency vs reliability, security vs usability)"
}