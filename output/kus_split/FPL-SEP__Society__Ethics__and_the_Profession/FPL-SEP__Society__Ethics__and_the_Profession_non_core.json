{
  "title": "FPL-SEP: Society, Ethics, and the Profession",
  "Non-core": "1. Consciously design programming languages to be inclusive and non-offensive.\nProfessional Dispositions\n1. Professional: Students must demonstrate and apply the highest standards when using\nprogramming languages and formal methods to build safe systems that are fit for their purpose.\n2. Meticulous: Attention to detail is essential when using programming languages and applying\nformal methods.\n3. Inventive: Programming and approaches to formal proofs is inherently a creative process, students\nmust demonstrate innovative approaches to problem solving. Students are accountable for their\nchoices regarding the way a problem is solved.\n4. Proactive: Programmers are responsible for anticipating all forms of user input and system\nbehavior and to design solutions that address each one.\n5. Persistent: Students must demonstrate perseverance since the correct approach is not always\nself-evident and a process of refinement may be necessary to reach the solution.\nMathematics Requirements\nRequired:\n● Discrete Mathematics – Boolean algebra, proof techniques, digital logic, sets and set\noperations, mapping, functions and relations, states and invariants, graphs and relations, trees,\ncounting, recurrence relations, finite state machine, regular grammar. (See also: MSF-Discrete)\n● Logic – propositional logic (negations, conjunctions, disjunctions, conditionals, biconditionals),\nfirst-order logic, logical reasoning (induction, deduction, abduction). (See also: MSF-Discrete)\n147\n● Mathematics – Matrices, probability, statistics. (See also: MSF-Probability, MSF-Statistics)\nCourse Packaging Suggestions\nCourse\nTwo example courses are presented illustrating how the content may be covered. The first is an\nintroductory course which covers the CS Core and KA Core content. This course focuses on the\ndifferent programming paradigms and ensures familiarity with each to a level sufficient to be able to\ndecide which paradigm is appropriate in each circumstance.\nThe second course is an advanced course focused on the implementation of a programming language,\nthe formal description of a programming language and a formal description of the behavior of a\nprogram.\nWhile these two courses have been the predominant way to cover this knowledge area over the past\ndecade, it is by no means the only way that this content can be covered. Institutions can, for example,\nchoose to cover only the CS Core content (24 hours) as part of one or spread over multiple courses\n(e.g., Software Engineering). Natural combinations are easily identifiable since they are the areas in\nwhich the Foundations of Programming Languages knowledge area overlaps with other knowledge\nareas. Such overlaps have been identified throughout this knowledge area.\nProgramming Language Concepts (Introduction) Course to include the following:\n● FPL-OOP: Object-Oriented Programming (6 hours)\n● FPL-Functional: Functional Programming (7 hours)\n● FPL-Logic: Logic Programming (3 hours)\n● FPL-Scripting: Shell Scripting (2 hours)\n● FPL-Event-Driven: Event-Driven and Reactive Programming (4 hours)\n● FPL-Parallel: Parallel and Distributed Computing (5 hours)\n● FPL-Types: Type Systems (6 hours)\n● FPL-Systems: Systems Execution and Memory Model (3 hours)\n● FPL-Translation: Language Translation and Execution (5 hours)\n● FPL-Abstraction: Program Abstraction and Representation (3 hours)\n● FPL-SEP: Society, Ethics, and the Profession (1 hour)\nPrerequisites:\n● Discrete Mathematics – Boolean algebra, proof techniques, digital logic, sets and set\noperations, mapping, functions and relations, states and invariants, graphs and relations, trees,\ncounting, recurrence relations, finite state machine, regular grammar. (See also: MSF-Discrete).\nProgramming Language Implementation (Advanced) Course to include the following:\n● FPL-Types: Type Systems (3 hours)\n● FPL-Translation: Language Translation and Execution (2 hours)\n● FPL-Syntax: Syntax Analysis(3 hours)\n● FPL-Semantics: Compiler Semantic Analysis (5 hours)\n● FPL-Analysis: Program Analysis and Analyzers (5 hours)\n148\n● FPL-Code: Code Generation(5 hours)\n● FPL-Run-Time: Run-time Systems (4 hours)\n● FPL-Constructs: Advanced Programming Constructs (4 hours)\n● FPL-Pragmatics: Language Pragmatics (3 hours)\n● FPL-Formalism: Formal Semantics (5 hours)\n● FPL-Methodologies: Formal Development Methodologies (5 hours)\nPrerequisites:\n● Discrete mathematics – Boolean algebra, proof techniques, digital logic, sets and set\noperations, mapping, functions and relations, states and invariants, graphs and relations, trees,\ncounting, recurrence relations, finite state machine, regular grammar (See also: MSF-Discrete).\n● Logic – propositional logic (negations, conjunctions, disjunctions, conditionals, biconditionals),\nfirst-order logic, logical reasoning (induction, deduction, abduction). (See also: MSF-Discrete).\n● Introductory programming course (See also: SDF-Fundamentals).\n● Programming proficiency in programming concepts such as: (See also: SDF-Fundamentals):\n● Type declarations such as basic data types, records, indexed data elements such as arrays\nand vectors, and class/subclass declarations, types of variables\n● Scope rules of variables\n● Selection and iteration concepts, function and procedure calls, methods, object creation\n● Data structure concepts such as: (See also: SDF-DataStructures):\n● Abstract data types, sequence and string, stack, queues, trees, dictionaries (See also: SDF-\nData-Structures)\n● Pointer-based data structures such as linked lists, trees, and shared memory locations (See\nalso: SDF-Data-Structures, AL-Foundational)\n● Hashing and hash tables (See also: SDF-Data-Structures, AL-Foundational)\n● System fundamentals and computer architecture concepts such as (See also: SF-Foundations):\n● Digital circuits design, clocks, bus (See also: OS-Principles)\n● registers, cache, RAM, and secondary memory (See also: OS-Memory)\n● CPU and GPU (See also: AR-Heterogeneity)\n● Basic knowledge of operating system concepts such as\n● Interrupts, threads and interrupt-based/thread-based programming (See also: OS-\nConcurrency)\n● Scheduling, including prioritization (See also: OS-Scheduling)\n● Memory fragmentation (See also: OS-Memory)\n● Latency\nCommittee\nChair: Michael Oudshoorn, High Point University, High Point, NC, USA\nMembers:\n● Annette Bieniusa, TU Kaiserslautern, Kaiserslautern, Germany\n● Brijesh Dongol, University of Surrey, Guildford, UK\n● Michelle Kuttel, University of Cape Town, Cape Town, South Africa\n● Doug Lea, State University of New York at Oswego, Oswego, NY, USA\n149\n● James Noble, Victoria University of Wellington, Wellington, New Zealand\n● Mark Marron, Microsoft Research, Seattle, WA, USA and University of Kentucky, Lexington, KY,\nUSA\n● Peter-Michael Osera, Grinnell College, Grinnell, IA, USA\n● Michelle Mills Strout, University of Arizona, Tucson, AZ, USA\nContributors:\n● Alan Dearle, University of St. Andrews, St. Andrews, Scotland\n150\nGraphics and Interactive Techniques (GIT)\nPreamble\nComputer graphics is the term used to describe the computer generation and manipulation of images\nand can be viewed as the science of enabling visual communication through computation. Its\napplication domains include animation, Computer Generated Imagery (CGI) and Visual Effects (VFX);\nengineering; machine learning; medical imaging; scientific, information, and knowledge visualization;\nsimulators; special effects; user interfaces; and video games. Traditionally, graphics at the\nundergraduate level focused on rendering, linear algebra, physics, the graphics pipeline, interaction,\nand phenomenological approaches. Today’s graphics courses increasingly include data science,\nphysical computing, animation, and haptics. Thus, the knowledge area (KA) expanded beyond core\nimage-based computer graphics. At the advanced level, undergraduate institutions are more likely to\noffer one or several courses specializing in a specific graphics knowledge unit (KU) or topic: e.g.,\ngaming, animation, visualization, tangible or physical computing, and immersive courses such as\nAugmented Reality (AR)/Virtual Reality (VR)/eXtended Reality (XR). There is considerable connection\nwith other computer science knowledge areas (KAs): Algorithmic Foundations, Architecture and\nOrganization, Artificial Intelligence; Human-Computer Interaction; Parallel and Distributed Computing;\nSpecialized Platform Development; Software Engineering; and Society, Ethics, and the Profession.\nFor students to become adept at the use and generation of computer graphics and interactive\ntechniques, many issues must be addressed, such as human perception and cognition, data and image\nfile formats, display specifications and protocols, hardware interfaces, and application program\ninterfaces (APIs). Unlike other knowledge areas, knowledge units within Graphics and Interactive\nTechniques may be included in a variety of elective courses. Alternatively, graphics topics may be\nintroduced in an applied project in courses primarily covering human computer interaction, embedded\nsystems, web development, introductory programming courses, etc. Undergraduate computer science\nstudents who study the knowledge units specified below through a balance of theory and applied\ninstruction will be able to understand, evaluate, and/or implement the related graphics and interactive\ntechniques as users and developers. Because technology changes rapidly, the Graphics and\nInteractive Techniques subcommittee attempted to avoid being overly prescriptive. Any examples of\nAPIs, programs, and languages should be considered as appropriate examples in 2023. In effect, this is\na snapshot in time.\nGraphics as a knowledge area has expanded and become pervasive since the CS2013 report.\nAR/VR/XR, artificial intelligence, computer vision, data science, machine learning, and interfaces driven\nby embedded sensors in everything from cars to coffee makers use graphics and interactive\ntechniques. The now ubiquitous smartphone has made much of the world’s population regular users\nand creators of graphics, digital images, and the interactive techniques to manipulate them. Animations,\ngames, visualizations, and immersive applications that ran on desktops in 2013, now can run on mobile\ndevices. The amount of stored digital data grew exponentially since 2013, and both data and\nvisualizations are now published by myriad sources including news media and scientific organizations.\nRevenue from mobile video games now exceeds that of music and movies combined [1]. CGI and VFX\nare employed in almost all films, animations, TV productions, advertising, and business graphics. The\n151\nnumber of people who create graphics has skyrocketed, as have the number of applications and\ngenerative tools used to produce graphics.\nIt is critical that students and faculty confront the ethical issues, questions, and conundrums that have\narisen and will continue to arise in and because of applications in computer graphics. Today’s\nheadlines unfortunately already provide examples of inequity and/or wrong-doing in autonomous\nnavigation, deepfakes, computational photography, generative images, and facial recognition.\nOverview of Knowledge Units\nThe following knowledge units are included in Graphics and Interactive Techniques. Descriptions are\nincluded below where they are not explicitly evident from the title. Graphics as a knowledge area is\nunique in that many of its knowledge units can and are taught as stand-alone courses where\nimplementation projects are critical to student mastery. Apart from Applied Rendering and Techniques\nwhich scaffolds the typical undergraduate interactive computer graphics course, the other knowledge\nunit are more specialized. To be consistent with the design of CS2023 those knowledge unit are limited\nto two weeks of instruction, corresponding roughly to 6 hours of instruction. This limitation allows a two-\nweek knowledge unit to be added to a course. Due to that time restriction, we list their Core Topic skill\nlevels in most of the knowledge units as “Explain.” However, if one of the thematic knowledge units is\nimplemented as a full-term course, our expectation is that the skill levels will rise to “Apply” or “Develop”\nwhich is reflected in many of the practical illustrative learning outcomes. This is not meant to be\nprescriptive but to encourage customization. How to implement a knowledge unit is left to the discretion\nof the instructor. If given a two-week constraint to teach one of the thematic knowledge units, many of\nus would choose to limit the topics and include an applied project. Our hope is that an inclusive list of\ntopics will help faculty design a course that best meets their and their department’s pedagogical goals.\n● GIT-Fundamentals: Fundamental Concepts. For nearly every computer scientist and\nsoftware developer, understanding of how humans interact with machines is essential.\n● GIT-Visualization: Visualization. Visualization seeks to determine and present underlying\ncorrelated structures and relationships in data sets from a wide variety of application areas. The\nprime objective is to communicate the information in a way which enhances understanding.\n● GIT-Rendering: Applied Rendering and Techniques. This unit includes basic rendering and\nfundamental graphics techniques that nearly every undergraduate course in graphics will cover\nand that are essential for further study in most graphics-related courses.\n● GIT-Modeling: Geometric Modeling. Graphics must be encoded in computer memory, often in\nthe form of a mathematical specification of shape and form.\n● GIT-Shading: Shading and Advanced Rendering. This unit contains more in-depth coverage\nof rendering topics.\n● GIT-Animation: Computer Animation. Computer Animation is concerned with the generation\nof moving imagery.\n● GIT-Simulation: Simulation. Simulation has strong ties to Computational Science. However, in\nthe graphics domain, simulation techniques are re-purposed to a different end. Rather than\ncreating predictive models, the goal instead is to achieve a mixture of physical plausibility and\n152\nartistic intention. To illustrate, the goals of “model surface tension in a liquid” and “produce a\ncrown splash” are related, but different. Depending on the simulation goals, covered topics may\nvary as shown.\n● Particle systems\n○ Integration methods (Forward Euler, Midpoint, Leapfrog)\n● Rigid Body Dynamics\n○ Particle systems\n○ Collision Detection\n○ Triangle/point\n○ Edge/edge\n● Cloth\n○ Particle systems\n○ Mass/spring networks\n○ Collision Detection\n● Particle-Based Water\n○ Integration methods\n○ Smoother Particle Hydrodynamics (SPH) Kernels\n○ Signed Distance Function-Based Collisions\n● Grid-Based Smoke and Fire\n○ Semi-Lagrangian Advection\n○ Pressure Projection\n● Grid and Particle-Based Water\n○ Particle-Based Water\n● Grid-Based Smoke and Fire\n○ Semi-Lagrangian Advection\n○ Pressure Projection\n● Grid and Particle-Based Water\n○ Particle-Based Water\n○ Grid-Based Smoke, and Fire\n● GIT-Immersion: Immersion. Immersion includes Augmented Reality (AR), Virtual Reality (VR),\nand Mixed Reality (MR).\n● GIT-Interaction: Interaction. Interactive computer graphics is a requisite part of real-time\napplications ranging from the utilitarian-like word processors to virtual and/or augmented reality\napplications.\n● GIT-Image: Image Processing. Image Processing consists of the analysis and processing of\nimages for multiple purposes, but most frequently to improve image quality and to manipulate\nimagery. It lies at the cornerstone of computer vision.\n● GIT-Physical: Tangible/Physical Computing. Tangible/Physical Computing refers to\nmicrocontroller-based interactive systems that detect and respond to sensor input.\n● GIT-SEP: Society, Ethics, and the Profession.\n153\nChanges since CS2013\nIn order to align CS2013’s Graphics and Visualization areas with the ACM Special Interest Group on\nGraphic and Interactive Techniques (SIGGRAPH) and to reflect the natural expansion of the field to\ninclude haptic and physical computing in addition to images, we have renamed it Graphics and\nInteractive Techniques (GIT). To capture the expanded footprint of the knowledge area , the following\nfive knowledge units have been added to the original list consisting of Fundamental Concepts,\nVisualization, Basic Rendering (renamed Rendering), Geometric Modeling, Advanced Rendering\n(renamed Shading), and Computer Animation.\n● Immersion (MR, AR, VR)\n● Interaction\n● Image Processing\n● Tangible/Physical Computing\n● Simulation\nCore Hours\nKnowledge Unit CS Core KA Core\nFundamental Concepts 4 3\nVisualization 6\nApplied Rendering and 15\nTechniques\nGeometric Modeling 6\nShading and Advanced 6\nRendering\nComputer Animation 6\nSimulation 6\nImmersion (MR, AR, VR) 6\nInteraction 4\nImage Processing 6\nTangible/Physical Computing 6\nSociety, Ethics, and the Included in SEP hours\nProfession\n154\nTotal 4\nKnowledge Units"
}