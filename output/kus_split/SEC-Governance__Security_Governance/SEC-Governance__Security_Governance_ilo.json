{
  "title": "SEC-Governance: Security Governance",
  "Illustrative Learning Outcomes": {
    "KA Core": "1. Describe critical assets and how they can be protected.\n2. Differentiate between security governance, management, and controls, giving examples of each.\n3. Describe a technical control and implement it to mitigate specific threats.\n4. Identify and assess risk of programs and database applications causing breaches.\n5. Design and implement appropriate backup strategies conforming to a given policy.\n6. Discuss a breach disclosure policy based on legal requirements and implement the policy.\n7. Identify the risks and benefits of outsourcing to the cloud.\nProfessional Dispositions\n● Meticulous: students need to pay careful attention to details to ensure the protection of real-world\nsoftware systems.\n263\n● Self-directed: students must be ready to deal with the many novel and easily unforeseeable ways\nin which adversaries might launch attacks.\n● Collaborative: students must be ready to collaborate with others, as collective knowledge and skills\nwill be needed to prevent attacks, protect systems and data during attacks, and plan for the future\nafter the immediate attack has been mitigated.\n● Responsible: students need to show responsibility when designing, developing, deploying, and\nmaintaining secure systems, as their enterprise and society is constantly at risk.\n● Accountable: students need to know that as future professionals they will be held accountable if a\nsystem or data breach were to occur, which should strengthen their resolve to prevent such\nbreaches from occurring in the first place.\nMathematics Requirements\nRequired:\n● MSF-Discrete\n● MSF-Probability\n● MSF-Statistics\nDesired:\n● MSF-Linear\nCourse Packaging Suggestions\nThere are two suggestions for course packaging, along with an additional suggestion for a more\nadvanced course.\nThe first suggestion for course packaging is to infuse the CS Core hours of the SEC KA into\nappropriate places in other coursework that covers related security topics in the following knowledge\nunits. As the CS Core Hours of the SEC KA are only 6 hours, coursework covering one or more of the\nfollowing knowledge units could accommodate them.\n● AI-SEP\n● AL-SEP\n● AR-Assembly\n● AR-Memory\n● DM-Security\n● FPL-Translation\n● FPL-Run-Time\n● FPL-Analysis\n● FPL-Types\n● HCI-Design\n● HCI-Accountability\n● HCI-SEP\n264\n● NC-Security\n● OS-Protection\n● PDC-Communication\n● PDC-Coordination\n● PDC-Evaluation\n● SDF-Fundamentals\n● SDF-Practices\n● SE-Validation\n● SEP-Privacy\n● SEP-Security\n● SF-Design\n● SF-Security\n● SPD-Common\n● SPD-Mobile\n● SPD-Web\nThe second approach for course packaging is to create an additional full course focused on security\nthat packages the following, building on the topics already covered in other knowledge areas.\nFundamentals of Computer Security:\n● SEC-Foundations (6 hours)\n● SEC-SEP (4 hours)\n● SEC-Coding (7 hours)\n● SEC-Crypto (5 hours)\n● SEC-Engineering (4 hours)\n● SEC-Forensics (2 hours)\n● SEC-Governance (1 hour)\n● AI-SEP (1 hour)\n● AR-Assembly (1 hour)\n● AR-Memory (1 hour)\n● DM-Security (3 hours)\n● FPL-Translation (1 hour)\n● FPL-Run-Time (1 hour)\n● FPL-Analysis (1 hour)\n● FPL-Types (2 hours)\n● HCI-Design (1 hour)\n● HCI-Accountability (1 hour)\n● HCI-SEP (1 hour)\n● NC-Security (2 hours)\n● OS-Protection (1 hour)\n● PDC-Communication (1 hour)\n● PDC-Coordination (1 hour)\n● PDC-Evaluation (1 hour)\n● SDF-Fundamentals (1 hour)\n265\n● SDF-Practices (1 hour)\n● SE-Validation: (2 hours)\n● SEP-Privacy (1 hour)\n● SEP-Security (2 hours)\n● SF-Design (2 hours)\n● SF-Security (2 hours)\n● SPD-Common (2 hours)\n● SPD-Mobile (2 hours)\n● SPD-Web: Web Platforms (2 hours)\nThe coverage exceeds 45 lecture hours, and so, in a typical course, instructors would need to decide\nwhat topics to emphasize and what not to cover without losing the perspective that the course should\nhelp students develop a security mindset.\nPrerequisites: Depends on the selected topics, but appropriate coursework covering MSF, SDF, and\nSE knowledge areas is needed.\nCourse objectives: Students should develop a security mindset and be ready to apply this mindset to\nsecuring data, software, systems, and applications.\nA third suggested packaging is to create an advanced course that develops a security\narchitect/engineer’s view by including the following:\nSecurity Engineering:\n● SEC-Foundations (6 hours)\n● SEC-SEP (4 hours)\n● SEC-Coding (6 hours)\n● SEC-Crypto (2 hours)\n● SEC-Engineering (10 hours)\n● SEC-Forensics (2 hours)\n● SEC-Governance (1 hour)\n● DM-Security (2 hours)\n● NC-Security (3 hours)\n● OS-Protection (2 hours)\n● PDC-Evaluation (2 hours)\n● SDF-Fundamentals (1 hour)\n● SDF-Practices (1 hour)\n● SE-Validation (2 hours)\n● SEP-Privacy (1 hour)\n● SEP-Security (1 hour)\n● SF-Design (2 hours)\n● SF-Security (2 hours)\n● SPD-Mobile (2 hours)\n● SPD-Web (2 hours)\n266\nThe coverage for all topics is over 45 lecture hours, and so instructors would need to decide what\ntopics to emphasize and what not to cover without losing the perspective that the course should help\nstudents develop the security engineer’s mindset. Laboratory time related to data and network security,\nweb platform, secure coding and validation would be valuable aspects of this course.\nPrerequisites: Depends on the selected topics, either the first or second packaging suggested above\nwould be recommended based on degree program needs.\nCourse objectives: Computer science students should develop the mindset of a security engineer and\nbe ready to apply this mindset to problems in designing and evaluating the security of a range of\ncomputing systems and information services.\nCommittee\nChair: Rajendra K. Raj, Rochester Institute of Technology, Rochester, NY, USA\nMembers:\n● Vijay Anand, University of Missouri – St. Louis, St. Louis, MO, USA\n● Diana Burley, American University, Washington, DC, USA\n● Sherif Hazem, Central Bank of Egypt, Cairo, Egypt\n● Michele Maasberg, United States Naval Academy, Annapolis, MD, USA\n● Bruce McMillin, Missouri University of Science and Technology, Rolla, MO, USA\n● Sumita Mishra, Rochester Institute of Technology, Rochester, NY, USA\n● Nicolas Sklavos, University of Patras, Patras, Greece\n● Blair Taylor, Towson University, Towson, MD, USA\n● Jim Whitmore, Dickinson College, Carlisle, PA, USA\nContributors:\n● Markus Geissler, Cosumnes River College, Sacramento, CA, USA\n● Michael Huang, Rider University, Lawrenceville, NJ, USA\n● Tim Preuss, Minnesota State Community and Technical College, Moorhead, MN, USA\n● Daniel Zappala, Brigham Young University, Provo, UT, USA\nReferences\n1. Joint Task Force on Cybersecurity Education. 2017. Cybersecurity Curricula 2017. ACM, IEEE-CS,\nAIS SIGSEC, and IFIP WG 11.8. https://doi.org/10.1145/3184594\n267\n268\nSociety, Ethics, and the Profession (SEP)\nPreamble\nThe ACM Code of Ethics and Professional Conduct states: “Computing professionals' actions change\nthe world. To act responsibly, they should reflect upon the wider impacts of their work, consistently\nsupporting the public good.” The IEEE Code of Ethics starts by recognizing “the importance of our\ntechnologies in affecting the quality of life throughout the world.” The AAAI Code of Professional Ethics\nand Conduct begins with “Computing professionals, and in particular, AI professionals’ actions change\nthe world. To act responsibly, they should reflect upon the wider impacts of their work, consistently\nsupporting the public good.”\nWhile technical issues dominate the computing curriculum, they do not constitute a complete\neducational program in the broader context. It is more evident today than ever that students must also\nbe exposed to the larger societal context of computing to develop an understanding of the critical and\nrelevant social, ethical, legal, and professional issues and responsibilities at hand. This need to\nincorporate the study of these non-technical issues into the ACM curriculum was formally recognized in\n1991, as articulated in the following excerpt from CS1991 [1].\nUndergraduates also need to understand the basic cultural, social, legal, and ethical issues\ninherent in the discipline of computing. They should understand where the discipline has been,\nwhere it is, and where it is heading. They should also understand their individual roles in this\nprocess, as well as appreciate the philosophical questions, technical problems, and aesthetic\nvalues that play an important part in the development of the discipline.\nStudents also need to develop the ability to ask serious questions about the social impact of\ncomputing and to evaluate proposed answers to those questions. Future practitioners must be\nable to anticipate the impact of introducing a given product into a given environment. Will that\nproduct enhance or degrade the quality of life? What will the impact be upon individuals,\ngroups, and institutions?\nFinally, students need to be aware of the basic legal rights of software and hardware vendors\nand users, and they also need to appreciate the ethical values that are the basis for those\nrights. Future practitioners must understand the responsibility that they will bear, and the\npossible consequences of failure. They must understand their own limitations as well as the\nlimitations of their tools. All practitioners must make a long-term commitment to remaining\ncurrent in their chosen specialties and in the discipline of computing as a whole.\nNonetheless, in recent years myriad high-profile issues affecting society at large have occurred leading\nto the conclusion that computer science professionals are not as prepared as they should be.\nAs technological advances (more specifically, how these advances are used by humans) continue to\nsignificantly impact the way we live and work, the critical importance of social and ethical issues and\nprofessional practice continues to increase in magnitude and consequence. The ways we use\n269\ncomputing products and platforms, while hopefully providing opportunities, also introduce ever more\nchallenging problems. A recent example is the emergence of generative AI, including large language\nmodels that generate code. A 2020 Communications of the ACM article [4] stated: “... because\ncomputing as a discipline is becoming progressively more entangled within the human and social\nlifeworld, computing as an academic discipline must move away from engineering-inspired curricular\nmodels and integrate the analytic lenses supplied by social science theories and methodologies.”\nIn parallel to, and as part of, the heightened awareness of the social consequences computing has on\nthe world, computing communities have become much more aware – and active – in areas of diversity,\nequity, inclusion, and accessibility. These feature in statements and initiatives at ACM [8], IEEE [9], and\nAAAI [10] and in their codes of conduct [1-3]. All students deserve an inclusive, diverse, equitable and\naccessible learning environment. Computing students also have a unique duty to ensure that when put\nto practice, their skills, knowledge, and competencies are applied in ways that work for, and not\nagainst, the principles of diversity, equity, inclusion, and accessibility. These principles are inherently a\npart of computing, and a new knowledge unit “Diversity, Equity, Inclusion and Accessibility” (SEP-DEIA)\nhas been added to this knowledge area.\nComputer science educators may opt to deliver the material in this knowledge area within the contexts\nof traditional technical and theoretical courses, in dedicated courses, and as part of capstone, project,\nand professional practice courses. The material in this knowledge area is best covered through a\ncombination of all the above. It is too commonly held that many topics in this knowledge area may not\nreadily lend themselves to being covered in other more traditional computer science courses. However,\nmany of these topics naturally arise in traditional courses, or can be included with minimal effort. The\nbenefits of exposing students to SEP topics within the context of those traditional courses are\ninvaluable. Nonetheless institutional challenges will present barriers; for instance, some of these\ntraditional courses may not be offered at a given institution and, in such cases, it is difficult to cover\nthese topics appropriately without a dedicated SEP course. If social, ethical, and professional\nconsiderations are covered only in a dedicated course and not in the context of others, it could reinforce\nthe false notion that technical processes are void of these important aspects, or that they are more\nisolated than they are. Because of the broad relevance of these knowledge units, it is important that as\nmany traditional courses as possible include aspects such as case studies, that analyze ethical, legal,\nsocial, and professional considerations in the context of the technical subject matter of those courses.\nCourses in areas such as software engineering, databases, computer graphics, computer networks,\ninformation assurance & security, and introduction to computing, all provide obvious context for\nanalysis of such issues. However, an ethics-related module could be developed for almost any\nprogram. It would be explicitly against the spirit of these recommendations to have only a dedicated\ncourse within a specific computer science curriculum without great practical reason. Further, these\ntopics should be covered in courses starting from year 1. Presenting them as advanced topics in later\ncourses only creates an artificial perception that SEP topics are only important at a certain level or\ncomplexity. While it is true that the importance and consequence of SEP topics increases with level and\ncomplexity, introductory topics are not devoid of SEP topics. Further, many SEP topics are best\npresented early to lay a foundation for more intricate topics later in the curriculum.\n270\nRunning through all the topics in this knowledge area is the need to speak to the computing\npractitioner’s responsibility to proactively address issues through both ethical and technical actions.\nToday it is important not only for the topics in this knowledge area, but for students’ knowledge in\ngeneral, that the ethical issues discussed in any course should be directly related to – and arise\nnaturally from – the subject matter of that course. Examples include a discussion in a database course\nof the SEP aspects of data aggregation or data mining; or a discussion in a software engineering\ncourse of the potential conflicts between obligations to the customer and users as well as all others\naffected by their work. Computing faculty who are unfamiliar with the content and/or pedagogy of\napplied ethics are urged to take advantage of the considerable resources from ACM, IEEE-CS, AAAI,\nSIGCAS (ACM Special Interest Group on Computers and Society), and other organizations.\nAdditionally, it is the educator’s responsibility to impress upon students that this area is just as\nimportant – in ways more important – than technical areas. The societal, ethical, and professional\nknowledge gained in studying topics in this knowledge area will be used throughout one’s career and\nare transferable between projects, jobs, and often even industries, particularly as one’s career\nprogresses into project leadership and management.\nThe ACM Code of Ethics and Professional Conduct [5], the IEEE Code of Ethics [6], and the AAAI\nCode of Professional Ethics and Conduct [7] provide guidance that serve as the basis for the conduct of\nall computing professionals in their work. The ACM Code emphasizes that ethical reasoning is not an\nalgorithm to be followed, and computer professionals are expected to consider how their work impacts\nthe public good as the primary consideration. It falls to computing educators to highlight the domain-\nspecific role of these topics for our students, but computer science programs should certainly be willing\nto lean on complementary courses from the humanities and social sciences.\nMost computing educators are not also moral philosophers. Yet CS2023, along with past CS curricular\nrecommendations, indicate the need for ethical analysis. CS2023 and prior curricular recommendations\nare quite clear on the required mathematical foundations that students are expected to gain which are\noften delivered by mathematics departments. Yet, the same is not true of moral philosophy. No one\nwould expect a student to be able to provide a proof by induction until after having successfully\ncompleted a course in discrete mathematics. Yet, the parallel with respect to ethical analyses is\nsomehow absent. We seemingly do (often) expect our students to perform ethical analysis without\nhaving the appropriate prerequisite knowledge from philosophy. Further, the application of ethical\nanalysis also underlies every other knowledge unit in this knowledge area. We acknowledge that the\nknowledge unit Methods for Ethical Analysis (SEP-Ethical-Analysis) is the only one in this knowledge\narea that does not readily lend itself to being taught in the context of other CS2023 knowledge areas.\nSuggestions in terms of addressing this appear in the Course Packaging Suggestions.\nThe lack of prerequisite training in social, ethical, and professional topics has facilitated graduates\noperating with a certain ethical egoism (e.g., ‘Here is what I believe/think/feel is right’). Regardless of\nhow well intentioned, one might conclude that this is what brought us to a point in history where there\nare frequent occurrences of unintended consequences of technology, serious data breaches, and\nsoftware failures causing economic, emotional. and physical harm. Certainly, computing graduates who\nhave learned how to apply the various ethical frameworks or lenses proposed through the ages would\nonly serve to improve this situation. In retrospect, to ignore the lessons from moral philosophy, which\n271\nhave been debated and refined for millennia – on what it means to act justly, or work for the common\ngood – appears as hubris.\nA computer science student must not graduate without understanding how society and ethics influence\nthe computing profession. Nor should it be possible to complete a computer science degree without\nlearning how computing professionals influence society, the ethical considerations involved in shaping\nthat impact, and the student-turned-graduate’s role in these relationships, as both computing\nprofessionals and members of society.\nChanges Since CS2013\n● The overall number of hours dedicated to this knowledge unit has doubled since CS2013 from 16 to\n32 – CS2013 had 11 ‘Tier 1’ hours and 5 ‘Tier 2’ hours while CS2023 has 18 CS Core hours and 14\nKA Core hours). However, many of these hours are best covered within the context of other\nknowledge areas as discussed in the introduction to CS2023. Additionally:\n○ Several knowledge units that were ‘elective only’ in CS2013 now have CS Core and KA\nCore hours.\n○ The number of hours in most knowledge units has increased.\n● SEP has been re-titled from “Social Issues and Professional Practice” to “Society, Ethics, and the\nProfession.” Our rationale follows.\n○ Professional practice is an important part of being a professional. However, a solid\nunderstanding of the profession in which one is to become a professional is needed –\nindeed it is a prerequisite. Through this lens, professional conduct is part of a profession,\nalong with its history, values, norms, etc. Additionally, “the profession” appears in the ACM\ntagline “Advancing Computing as a Science & Profession”, and the ACM code [5]: “The\nACM Code of Ethics and Professional Conduct …expresses the conscience of the\nprofession.” In a similar way the AAAI Code [7] states that it “...expresses the conscience of\nthe AI profession”, and the IEEE code [6] states: “in accepting a personal obligation to our\nprofession, its members and the communities we serve, do hereby commit ourselves to the\nhighest ethical and professional conduct.” While studying computing, students should not\nonly learn how to become professionals, but also learn about the profession in which they\nwill become professionals.\n● Inclusion of the Diversity, Equity, Inclusion and Accessibility (DEIA) knowledge unit.\n● Changed titles of two knowledge units\n○ Professional Communication -> Communication\n○ Analytical Tools -> Methods for Ethical Analysis\nCore Hours\nKnowledge Unit CS Core KA Core\nSocial Context 3 2\nMethods for Ethical Analysis 2 1\n272\nProfessional Ethics 2 2\nIntellectual Property 1 1\nPrivacy and Civil Liberties 2 1\nCommunication 2 1\nSustainability 1 1\nHistory 1 1\nEconomies of Computing 0 1\nSecurity Policies, Laws, and Computer Crimes 2 1\nDiversity, Equity, Inclusion and Accessibility 2 2\nTotal 18 14\nKnowledge Units"
  }
}