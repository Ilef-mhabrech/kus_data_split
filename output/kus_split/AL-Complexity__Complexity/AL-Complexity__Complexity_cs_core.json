{
  "title": "AL-Complexity: Complexity",
  "CS Core": "1. Complexity Analysis Framework\na. Best, average, and worst-case performance of an algorithm\nb. Empirical and relative (Order of Growth) measurements\nc. Input size and primitive operations\nd. Time and space efficiency\n2. Asymptotic complexity analysis (average and worst-case bounds)\na. Big-O, Big-Omega, and Big-Theta formal notations\nb. Foundational Complexity Classes and Representative Examples/Problems\ni. O(1) Constant (e.g., array access)\nii. O(log n) Logarithmic (e.g., binary search)\n2\niii. O(n) Linear (e.g., linear search)\niv. O(n log n) Log Linear (e.g., mergesort)\n2\nv. O(n2) Quadratic (e.g., selection sort)\nvi. O(nc) Polynomial (e.g., O(n3) Gaussian elimination)\nvii. O(2n) Exponential (e.g., Knapsack, Satisfiability (SAT),\nTraveling Sales-Person (TSP), all subsets)\nviii. O(n!) Factorial (e.g., Hamiltonian circuit, all permutations)\n3. Empirical measurements of performance\n4. Tractability and intractability\na. P, NP, and NP-Complete Complexity Classes\nb. NP-Complete Problems (e.g., SAT, Knapsack, TSP)\nc. Reductions\n5. Time and space tradeoffs in algorithms\n91"
}