{
  "title": "AL-Complexity: Complexity",
  "Illustrative Learning Outcomes": {
    "CS Core": "1. Prepare a presentation that explains to first year students the basic concepts of algorithmic\ncomplexity including best, average, and worst-case algorithm behavior, Big- O, Omega, and Theta\nnotations, complexity classes, time and space tradeoffs, empirical measurement, and impact on\npractical problems.\n2. Using examples, explain each of the foundational complexity classes in this unit.\n3. For each foundational complexity class in this unit, explain an algorithm that demonstrates the\nassociated runtime complexity.\n4. For each algorithm in the AL-Foundational unit, explain its runtime complexity class and why it\nbelongs to this class.\n5. Informally evaluate the foundational complexity class of simple algorithms.\n6. Given a problem to program for which there may be several algorithmic approaches, evaluate them\nand determine which are feasible, and select one that is optimal in implementation and run-time\nbehavior.\n7. Develop empirical studies to determine and validate hypotheses about the runtime complexity of\nvarious algorithms by running algorithms on input of various sizes and comparing actual\nperformance to the theoretical analysis.\n8. Explain examples that illustrate time-space tradeoffs of algorithms.\n9. Explain how tree balance affects the efficiency of binary search tree operations.\n10. Explain to a non-technical audience the significance of tractable versus intractable algorithms using\nan intuitive explanation of Big-O complexity.\n11. Explain the significance of NP-Completeness.\n12. Explain how NP-Hard is a lower bound and NP is an upper bound for NP-Completeness.\n13. Explain examples of NP-complete problems.",
    "KA Core": "14. Use recurrence relations to evaluate the time complexity of recursively defined algorithms.\n15. Apply elementary recurrence relations using a form of the Master Theorem.\n16. Apply Big-O notation to give upper case bounds on time/space complexity of algorithms.\n17. Explain the Cook-Levin Theorem and the NP-Completeness of SAT.\n92\n18. Explain the classes P and NP.\n19. Prove that a problem is NP-Complete by reducing a classic known NP-C problem to it (e.g., 3SAT\nand Clique).\n20. Explain the P-space class and its relation to the EXP class."
  }
}