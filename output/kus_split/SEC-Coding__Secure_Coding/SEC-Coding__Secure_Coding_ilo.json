{
  "title": "SEC-Coding: Secure Coding",
  "Illustrative Learning Outcomes": {
    "CS Core": "1. Identify underlying problems in given examples of an enumeration of common weaknesses and\nexplain how they can be circumvented.\n2. Apply input validation and data sanitization techniques to enhance security of a program.\n3. Describe how the selection of a programming language can impact the security of the system being\nconstructed.\n4. Rewrite a program in a type-safe language (e.g., Java or Rust) originally written in an unsafe\nprogramming language (e.g., C/C++).\n5. Evaluate a program for possible buffer overflow attacks and rewrite to prevent such attacks.\n6. Evaluate a set of related programs for possible race conditions and prevent an adversary from\nexploiting them.\n7. Evaluate and prevent SQL injections attacks on a database application.\n8. Evaluate and prevent cross-site scripting attacks against a website.",
    "KA Core": "9. Describe different kinds of malicious software.\n10. Construct a program that tests for all input handling errors.\n11. Explain the risks of misusing interfaces with third-party code and how to correctly use third-party\ncode.\n12. Discuss the need to update software to fix security vulnerabilities and the lifecycle management of\nthe fix.\n13. Construct a system that is protected from unauthorized information flows.\n14. Apply static and dynamic tools to identify programming faults.\n15. Evaluate a system for the existence of malware and remove it.\n16. Implement preventive techniques to reduce the occurrence of ransomware."
  }
}