{
  "title": "HCI-SEP: Society, Ethics, and the Profession",
  "Illustrative Learning Outcomes": {
    "CS Core": "1. Conduct a user-centered design process that is integrated into a project.\n2. Identify and critique the potential impacts of a design on society and relevant communities to\naddress such concerns as sustainability, inclusivity, safety, security, privacy, harm, and disparate\nimpact.",
    "KA Core": "181\n2. Critique a recent example of a non-inclusive design choice, its societal implications, and propose\npotential design improvements.\n3. Evaluating the design: Identify the implications and broader impacts of a given design.",
    "Non-core": "4. Evaluate the privacy implications within a VR/AR/MR scenario.\nProfessional Dispositions\n● Adaptable: An HCI practitioner should be adaptable to address dynamic changes in technology,\nuser needs, and design challenges.\n● Meticulous: An HCI practitioner should be meticulous in ensuring that their products are both user-\nfriendly and meet the objectives of the project.\n● Empathetic: An HCI practitioner must demonstrate understanding of the user’s needs.\n● Team-oriented: The successful HCI practitioner should focus on the success of the team.\n● Inventive: An HCI practitioner should design solutions that are informed by past practice, the needs\nof the audience, and HCI fundamentals. Creativity is required to blend these into something that\nsolves the problem appropriately and elegantly.\nMathematics Requirements\nRequired:\n● Basic statistics (MSF-Statistics) to support the evaluation and interpretation of results, including\ncentral tendency, variability, frequency distribution.\nCourse Packaging Suggestions\nIntroduction to HCI for CS majors and minors, to include the following:\n● HCI-User: Understanding the User (7 hours)\n● HCI-Accountability: Accountability and Responsibility in Design: (2 hours)\n● HCI-Accessibility: Accessibility and Inclusive Design: (4 hours)\n● HCI-Evaluation: Evaluating the Design: (3 hours)\n● HCI-Design: System Design: (10 hours)\n● HCI-SEP: Society, Ethics, and the Profession: (2 hours)\nPrerequisites:\n● CS2\nCourse objectives: A student who completes this course should be able to describe user-centered\ndesign principles and apply them in the context of a small project.\nIntroduction to Data Visualization to include the following:\n● GIT-Visualization (30 hours)\n● GIT-Rendering (10 hours)\n● HCI-User: Understanding the User (3 hours)\n182\n● SEP-Privacy, SEP-Ethical-Analysis (4 hours)\nPrerequisites:\n● CS2\n● MSF-Linear\nCourse objectives: Students should understand how to select a dataset; ensure the data are accurate\nand appropriate; and design, develop and test a visualization program that depicts the data and is\nusable.\nAdvanced Course: Usability Testing\n● HCI-User (5 hours)\n● HCI-Accountability (3 hours)\n● HCI-Accessibility (4 hours)\n● HCI-Evaluation (20 hours)\n● HCI-Design (3 hours)\n● HCI-SEP (5 hours)\nPrerequisites:\n● Introductory/Foundation courses in HCI\n● Research methods, MSF-Statistics\nCourse objectives: Students should be able to formally evaluate products including the design and\nexecution of usability test tasks, recruitment of appropriate users, design of test tasks, design of the test\nenvironment, test plan development and implementation, analysis and interpretation of the results, and\ndocumentation and presentation of results and recommendations. Students should be able to select\nappropriate techniques, procedures, and protocols to apply in various situations for usability testing with\nusers. Students should also be able to design an appropriate evaluation plan, effectively conduct the\nusability test, collect data, and analyze results so that they can suggest improvements.\nCommittee\nChair: Susan L. Epstein, Hunter College and The Graduate Center of The City University of New York,\nNY, USA\nMembers:\n● Sherif Aly, The American University of Cairo, Cairo, Egypt\n● Jeremiah Blanchard, University of Florida, Gainesville, FL, USA\n● Zoya Bylinskii, Adobe Research, Cambridge, MA, USA\n● Paul Gestwicki, Ball State University, Muncie, IN, USA\n● Susan Reiser, University of North Carolina at Asheville, Asheville, NC, USA\n● Amanda M. Holland-Minkley, Washington and Jefferson College, Washington, PA, USA\n● Ajit Narayanan, Google, Chennai, India\n● Nathalie Riche, Microsoft, Redmond, WA, USA\n● Kristen Shinohara, Rochester Institute of Technology, Rochester, NY, USA\n● Olivier St-Cyr, University of Toronto, Toronto, Canada\n183\n184\nMathematical and Statistical Foundations (MSF)\nPreamble\nA strong mathematical foundation remains a bedrock of computer science education and infuses the\npractice of computing whether in developing algorithms, designing systems, modeling real-world\nphenomena, or computing with data. This Mathematical and Statistical Foundations (MSF) knowledge\narea – the successor to the ACM CS2013 [1] curriculum's \"Discrete Structures\" area – seeks to identify\nthe mathematical and statistical material that undergirds modern computer science. The change of\nname corresponds to a realization both that the broader name better describes the combination of\ntopics from the 2013 report and from those required for the recently growing areas of computer science,\nsuch as artificial intelligence, machine learning, data science, and quantum computing, many of which\nhave continuous mathematics as their foundations.\nThe committee sought the following inputs to prepare their recommendations:\n● A survey about mathematical preparation distributed to computer science faculty (nearly 600\nrespondents) across a variety of institutional types and in various countries;\n● Math-related curricular views amongst data collected from ACM’s survey of industry\nprofessionals (865 respondents);\n● Mathematics requirements stated by all the knowledge areas in the report;\n● Direct input from the computer science theory community; and\n● Review of past curricular reports including recent ones on data science (e.g., Park City report\n[2]) and quantum computing education.\nChanges since CS2013\nThe breadth of mathematics needed to address the mathematical needs of rapidly growing areas such\nas artificial intelligence, machine learning, robotics, data science, and quantum computing has grown\nbeyond discrete structures. These areas call for a renewed focus on probability, statistics, and linear\nalgebra, as supported by the faculty survey that asked respondents to rate various mathematical areas\nin their importance for both an industry career as well as for graduate school: the combined such\nratings for probability, statistics, and linear algebra, for example, were 98%, 98% and 89% respectively,\nreflecting a strong consensus in the computer science academic community.\nCore Hours\nAcknowledging some tensions\nSeveral challenges face computer science (CS) programs when weighing mathematics requirements:\n(1) many CS majors, perhaps aiming for a software career, are unenthusiastic about investing in\nmathematics; (2) institutions such as liberal-arts colleges often limit how many courses a major may\nrequire, while others may require common engineering courses that fill up the schedule; and (3) some\nprograms adopt a more pre-professional curricular outlook while others emphasize a more foundational\none. Thus, we are hesitant to recommend an all-encompassing set of mathematical topics that “every\n185\nCS degree must require.” Instead, we outline two sets of core requirements, a CS Core set suited to\nhours-limited majors and a more expansive set of CS Core plus KA Core to align with technically\nfocused programs. The principle here is that considering the additional foundational mathematics\nneeded for AI, data science, and quantum computing, programs ought to consider as much as possible\nfrom the more expansive CS+KA version unless there are sound institutional reasons for alternative\nrequirements.\nNote: the hours in a row (example: linear algebra) add up to 40 (= 5 + 35), reflecting a standard course;\nshorter combined courses may be created, for example, by including probability in discrete\nmathematics (29 hours of discrete mathematics, 11 hours of probability).\nKnowledge Unit CS Core KA Core\nDiscrete Mathematics 29 11\nProbability 11 29\nStatistics 10 30\nLinear Algebra 5 35\nCalculus 0 40\nTotal 55 145\nRationale for recommended hours",
    "CS Core: While some discrete mathematics courses include probability, we highlight its importance": "with a minimum number of hours (11) to reflect the strong consensus in the academic community\nbased on the survey. Taken together, the total CS Core across discrete mathematics and probability\n(40 hours) is typical of a one-term course. Fifteen hours are allotted to statistics and linear algebra for\nbasic definitions so that, for example, students should at least be familiar with terms like mean,\nstandard deviation, and vector. These could be covered in regular computer science courses. Many\nprograms typically include a broader statistics requirement.",
    "KA Core: The KA Core hours can be read as the remaining hours available to flesh out each topic into": "a standard 40-hour course. Note that the calculus hours roughly correspond to the typical Calculus-I\ncourse now standard across the world. Based on our survey, most programs already require Calculus-I.\nHowever, we have left out Calculus-II (an additional 40 hours) and left it to programs to decide whether\nCalculus-II should be added to program requirements. Programs could choose to require a more\nrigorous calculus-based probability or statistics sequence, or non-calculus-based versions. Similarly,\nlinear algebra can be taught as an applied course without a calculus prerequisite or as a more\nadvanced course.\n186\nKnowledge Units"
  }
}