{
  "title": "PDC-Evaluation: Evaluation",
  "Illustrative Learning Outcomes": {
    "CS Core": "1. Revise a specification to enable parallelism and distribution without violating other essential\nproperties or features.\n2. Explain how concurrent notions of safety and liveness extend their sequential counterparts.\n3. Specify a set of invariants that must hold at each bulk-parallel step of a computation.\n224\n4. Write a test program that can reveal a data race error; for example, missing an update when two\nactivities both try to increment a variable.\n5. In a given context, explain the extent to which introducing parallelism in an otherwise sequential\nprogram would be expected to improve throughput and/or reduce latency, and how it may impact\nenergy efficiency.\n6. Show how scaling and efficiency change for sample problems without and with the assumption of\nproblem size changing with the number of processors; further explain whether and how scalability\nwould change under relaxations of sequential dependencies.",
    "KA Core": "7. Specify and measure behavior when a service is requested by unexpectedly many clients.\n8. Identify and repair a performance problem due to sequential bottlenecks.\n9. Empirically compare throughput of two implementations of a common design (perhaps using an\nexisting test harness framework).\n10. Identify and repair a performance problem due to communication or data latency.\n11. Identify and repair a performance problem due to communication or data latency.\n12. Identify and repair a performance problem due to resource management overhead.\n13. Identify and repair a reliability or availability problem."
  }
}