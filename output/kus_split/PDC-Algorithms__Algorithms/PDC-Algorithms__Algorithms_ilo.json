{
  "title": "PDC-Algorithms: Algorithms",
  "Illustrative Learning Outcomes": {
    "CS Core": "1. Implement a parallel/distributed component based on a known algorithm.\n2. Write a data-parallel program that for example computes the average of an array of numbers.\n3. Write a producer-consumer program in which one component generates numbers, and another\ncomputes their average. Measure speedups when the numbers are small scalars versus large\nmulti-precision values.\n4. Extend an event-driven sequential program by establishing a new activity in an event handler (for\nexample a new thread in a GUI action handler).\n5. Improve the performance of a sequential component by introducing parallelism and/or distribution.\n6. Choose among different parallel/distributed designs for components of a given system.",
    "KA Core": "226\n7. Design, implement, analyze, and evaluate a component or application for X operating in a given\ncontext, where X is in one of the listed domains, for example, a genetic algorithm for factory floor\ndesign.\n8. Critique the design and implementation of an existing component or application, or one developed\nby classmates.\n9. Compare the performance and energy efficiency of multiple implementations of a similar design, for\nexample, multicore versus clustered versus GPU.\nProfessional Dispositions\n● Meticulous: Students’ attention to detail is essential when applying constructs with non-obvious\ncorrectness conditions.\n● Persistent: Students must be prepared to try alternative approaches when solutions are not self-\nevident.\nMathematics Requirements\nRequired:\n● MSF-Discrete – Logic, discrete structures including directed graphs.\nDesired:\n● MSF-Linear\n● MSF-Calculus – Differential equations\nCourse Packaging Suggestions\nThe CS Core requirements need not be provided by a single course. They may be included across\ncourses primarily devoted to software development, programming languages, systems, data\nmanagement, networking, computer architecture, and/or algorithms.\nAlternatively, the CS Core provides a basis for courses focusing on parallel and/or distributed\ncomputing. At one extreme, it is possible to offer a single broadly constructed course covering all PDC\nKA Core topics to varying depths. At the other extreme, it is possible to infuse PDC KA Core coverage\nacross the curriculum with courses that cover parallel and distributed approaches alongside sequential\nones for nearly every topic in computing. More conventional choices include courses that focus on one\nor a few categories (such as multicore or cluster), and algorithmic domains (such as linear algebra, or\nresource management). Such courses may go into further depth than listed in one or more KUs, and\ninclude additional software development experience, but include only CS-Core-level coverage of other\ntopics.\nAs an example, a course mainly focusing on multicores could extend CS Core topics as follows.\n1. Programs: KA Core on threads, tasks, instruction-level parallelism.\n2. Communication: KA Core on multicore architectures, memory, concurrent data stores.\n227\n3. Coordination: KA Core on blocking and non-blocking synchronization, speculation, cancellation,\nfutures, and divide-and-conquer data parallelism.\n4. Evaluation: KA Core on performance analysis.\n5. Algorithms: project-based KA Core coverage of data processing and resource management.\nMore extensive examples and guidance for courses focusing on HPC are provided by the NSF/IEEE-\nTCPP Curriculum Initiative on Parallel and Distributed Computing [1].\nCommittee\nChair: Doug Lea, State University of New York at Oswego, Oswego, NY, USA\nMembers:\n● Sherif Aly, American University of Cairo, Cairo, Egypt\n● Michael Oudshoorn, High Point University, High Point, NC, USA\n● Qiao Xiang, Xiamen University, Xiamen, China\n● Dan Grossman, University of Washington, Seattle, WA, USA\n● Sebastian Burckhardt, Microsoft Research, Redmond WA, USA\n● Vivek Sarkar, Georgia Tech, Atlanta, GA, USA\n● Maurice Herlihy, Brown University, Providence, RI, USA\n● Sheikh Ghafoor, Tennessee Tech, Cookeville, TN, USA\n● Chip Weems, University of Massachusetts, Amherst, MA, USA\nContributors:\n● Paul McKenney, Meta, Beaverton, OR, USA\n● Peter Buhr, University of Waterloo, Waterloo, Ontario, Canada\nReferences\n1. Prasad, S. K., Estrada, T., Ghafoor, S., Gupta, A., Kant, K., Stunkel, C., Sussman, A.,\nVaidyanathan, R., Weems, C., Agrawal, K., Barnas, M., Brown, D. W., Bryant, R., Bunde, D. P.,\nBusch, C., Deb, D., Freudenthal, E., Jaja, J., Parashar, M., Phillips, C., Robey, B., Rosenberg, A.,\nSaule, E., Shen, C. 2020. NSF/IEEE-TCPP Curriculum Initiative on Parallel and Distributed\nComputing - Core Topics for Undergraduates, Version II-beta,\nOnline: http://tcpp.cs.gsu.edu/curriculum/, 53 pages. Accessed March 2024.\n228\nSoftware Development Fundamentals (SDF)\nPreamble\nFluency in the process of software development is fundamental to the study of computer science. To\nuse computers to solve problems most effectively, students must be competent at reading and writing\nprograms. Beyond programming skills, however, they must be able to select and use appropriate data\nstructures and algorithms and use modern development and testing tools.\nThe SDF knowledge area brings together fundamental concepts and skills related to software\ndevelopment, focusing on concepts and skills that should be taught early in a computer science\nprogram, typically in the first year. This includes fundamental programming concepts and their effective\nuse in writing programs, use of fundamental data structures which may be provided by the\nprogramming language, basics of programming practices for writing good quality programs, reading,\nand understanding programs, and some understanding of the impact of algorithms on the performance\nof the programs. The 43 hours of material in this knowledge area may be augmented with core material\nfrom other knowledge areas as students progress to mid- and upper-level courses.\nThis knowledge area assumes a contemporary programming language with built-in support for common\ndata types including associative data types like dictionaries/maps as the vehicle for introducing\nstudents to programming (e.g., Python, Java). However, this is not to discourage the use of older or\nlower-level languages for SDF — the knowledge units below can be suitably adapted for the actual\nlanguage used.\nThe emergence of generative AI and Large Language Models (LLMs), which can generate programs\nfor many programming tasks, will undoubtedly affect the programming profession and consequently the\nteaching of many CS topics. However, to be able to effectively use generative AI in programming tasks,\na programmer must have a good understanding of programs, and hence must still learn the foundations\nof programming and develop basic programming skills - which is the aim of SDF. Consequently, we feel\nthat the desired outcomes for SDF should remain the same, though different instructors may now give\nmore emphasis to program understanding, documenting, specifications, analysis, and testing. (This is\nlike teaching students multiplication, addition, etc. even though calculators can be used to do them).\nChanges since CS 2013\nThe main change from 2013 is a stronger emphasis on developing fundamental programming skills and\neffective use of in-built data structures (which many contemporary languages provide) for problem\nsolving.\nOverview\nThis Knowledge Area has five knowledge units which follow.\n1. SDF-Fundamentals: Fundamental Programming Concepts and Practices – This knowledge unit\naims to develop an understanding of basic concepts, and the ability to fluently use basic language\n229\nconstructs as well as modularity constructs. It also aims to familiarize students with the concept of\ncommon libraries and frameworks, including those to facilitate API-based access to resources.\n2. SDF-Data-Structures: Fundamental Data Structures – This knowledge unit aims to develop core\nconcepts relating to Data Structures and associated operations. Students should understand the\nimportant data structures available in the programming language or as libraries, and how to use\nthem effectively, including choosing appropriate data structures while designing solutions for a\ngiven problem.\n3. SDF-Algorithms: Algorithms – This knowledge unit aims to develop the foundations of algorithms\nand their analysis. The KU should also empower students in selecting suitable algorithms for\nbuilding modest-complexity applications.\n4. SDF-Practices: Software Development Practices – This knowledge unit develops the core\nconcepts relating to modern software development practices. It aims to develop student\nunderstanding and basic competencies in program testing, enhancing the readability of programs,\nand using modern methods and tools including some general-purpose IDE.\n5. SDF-SEP: Society, Ethics, and the Profession – This knowledge unit aims to develop an initial\nunderstanding of some of the ethical issues related to programming, professional values\nprogrammers need to have, and the responsibility to society that programmers have. This\nknowledge unit is a part of the SEP Knowledge Area.\nCore Hours\nKnowledge Unit CS Core KA Core\nFundamental Programming Concepts 20\nand Practices\nFundamental Data Structures 6 + 6 (AL)\nAlgorithms 3 + 3 (AL)\nSoftware Development Practices 5\nSociety, Ethics and the Profession Included in SEP hours\nTotal 43\nNote: The CS Core hours include 9 hours shared with AL, but counted here.\nKnowledge Units"
  }
}