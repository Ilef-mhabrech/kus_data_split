{
  "title": "SE-Reliability: Software Reliability",
  "KA Core": "1. Concept of reliability as probability of failure or mean time between failures, and faults as cause of\nfailures\n2. Identifying reliability requirements for different kinds of software\n3. Software failures caused by defects/bugs, and so for high reliability the goal is to have minimum\ndefects – by injecting fewer defects (better training, education, planning), and by removing most of\nthe injected defects (testing, code review, etc.)\n4. Software reliability, system reliability and failure behavior\n5. Defect injection and removal cycle, and different approaches for defect removal\n6. Compare the “error budget” approach to reliability with the “error-free” approach and identify\ndomains where each is relevant.\nNon-Core:\n7. Software reliability models\n8. Software fault tolerance techniques and models\na. Contextual differences in fault tolerance (e.g., crashing a flight critical system is strongly\navoided, crashing a data processing system before corrupt data is written to storage is highly\nvaluable)\n9. Software reliability engineering practices – including reviews, testing, practical model checking\n10. Identification of dependent and independent failure domains, and their impact on system reliability\n11. Measurement-based analysis of software reliability – telemetry, monitoring and alerting,\ndashboards, release qualification metrics, etc.\n250"
}