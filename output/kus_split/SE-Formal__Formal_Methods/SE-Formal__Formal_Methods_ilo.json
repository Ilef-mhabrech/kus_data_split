{
  "title": "SE-Formal: Formal Methods",
  "Illustrative Learning Outcomes": "1. Describe the role formal specification and analysis techniques can play in the development of\ncomplex software and compare their use as validation and verification techniques with testing.\n2. Apply formal specification and analysis techniques to software designs and programs with low\ncomplexity.\n3. Explain the potential benefits and drawbacks of using formal specification languages.\nProfessional Dispositions\n● Collaborative: Software engineering is increasingly described as a “team sport” – successful\nsoftware engineers are able to work with others effectively. Humility, respect, and trust underpin\nthe collaborative relationships that are essential to success in this field.\n251\n● Professional: Software engineering produces technology that has the chance to influence\nliterally billions of people. Awareness of our role in society, strong ethical behavior, and\ncommitment to respectful day-to-day behavior outside of one’s team are essential.\n● Communicative: No single software engineer on a project is likely to know all the project\ndetails. Successful software projects depend on engineers communicating clearly and regularly\nto coordinate effectively.\n● Meticulous: Software engineering requires attention to detail and consistent behavior from\neveryone on the team. Success in this field is clearly influenced by a meticulous approach -\ncomprehensive understanding, proper procedures, and a solid avoidance of cutting corners.\n● Responsible: The collaborative aspects of software engineering also highlight the value of\nbeing responsible. Failing to take responsibility, failing to follow through, and failing to keep\nothers informed are all classic causes of team friction and bad project outcomes.\nMathematics Requirements\nDesirable:\n● Introductory statistics (performance comparisons, evaluating experiments, interpreting survey\nresults, etc.). (See also CS-Core requirements for MSF-Statistics)\nCourse Packaging Suggestions\nAdvanced Course to include at least the following:\n● SE-Teamwork (4 hours)\n● SE-Tools (4 hours)\n● SE-Requirements (2 hours)\n● SE-Design (5 hours)\n● SE-Construction (4 hours)\n● SE-Validation (4 hours)\n● SE-Refactoring (2 hours)\n● SE-Reliability (2 hours)\n● SEP-Professional-Ethics (7 hours)\nPrerequisites:\n● SDF-Fundamentals\nCourse objectives: Students should be able to perform good quality code review for colleagues\n(especially focusing on professional communication and teamwork needs), read and write unit tests,\nuse basic software tools (IDEs, version control, static analysis tools) and perform basic activities\nexpected of a new hire on a software team.\nCommittee\nChair: Titus Winters, Google, New York City, NY, USA\n252\nMembers:\n● Brett A. Becker, University College Dublin, Dublin, Ireland\n● Adam Vartanian, Cord, London, UK\n● Bryce Adelstein Lelbach, NVIDIA, New York City, NY, USA\n● Patrick Servello, CIWRO, Norman, OK, USA\n● Pankaj Jalote, IIIT-Delhi, Delhi, India\n● Christian Servin, El Paso Community College, El Paso, TX, USA\nContributors:\n● Hyrum Wright, Google, Pittsburgh, PA, USA\n● Olivier Giroux, Apple, Cupertino, CA, USA\n● Gennadiy Civil, Google, New York City, NY, USA\n253\n254\nSecurity (SEC)\nPreamble\nComputing supports nearly every facet of modern critical infrastructure: transportation, communication,\nhealthcare, education, energy generation and distribution, to name a few. With rampant attacks on and\nbreaches of this infrastructure, computer science graduates have an important role in designing,\nimplementing, and operating software systems that are robust, safe, and secure.\nThe Security (SEC) knowledge area focuses on developing a security mindset into the overall ethos of\ncomputer science graduates so that security is embedded in all their work products. Computer science\nstudents need to learn about system vulnerabilities and understand threats against computer systems.\nThe Security title choice was intentional to serve as a one-word umbrella term for this knowledge area,\nwhich also includes concepts to support privacy, cryptography, secure systems, secure data, and\nsecure code.\nThe SEC knowledge area relies on shared concepts pervasive in all the other areas of CS2023. It\nidentifies seven crosscutting concepts of cybersecurity: confidentiality, integrity, availability, risk\nassessment, systems thinking, adversarial thinking, and human-centered thinking. The seventh\nconcept, human-centered thinking, is additional to the six crosscutting concepts originally defined in the\nCybersecurity Curricula 2017 (CSEC2017) [1]. This addition reinforces to students that humans are\nalso a link in the overall chain of security, a theme that is also covered in knowledge areas such as\nHCI. Principles of protecting systems (also in the DM, OS, SDF, SE and SF knowledge areas) include\nsecurity-by-design, privacy-by-design, defense-in-depth, and zero-trust.\nAnother concept is the notion of assurance, which is an attestation that security mechanisms need to\ncomply with the security policies that have been defined for data, processes, and systems. Assurance\nis tied in with the concepts of verification and validation in the SE knowledge area. Considerations of\ndata privacy and security are shared with the DM (technical aspects) and SEP knowledge areas.\nThe SEC knowledge area thus sits atop several of the other CS2023 knowledge areas, while including\nadditional concepts that are not present in those knowledge areas. The specific dependence on other\nknowledge areas is stated below, starting with the Core Hours table. CS2023 treats security as a\ncrucial component of the skillset of any CS graduate, and the hours needed for security preparation\ncome from all the other 16 CS2023 knowledge areas.\nChanges since CS2013\nThe Security knowledge area is an updated name for CS2013’s Information Assurance and Security\n(IAS) knowledge area. Since 2013, Information Assurance and Security has been rebranded as\nCybersecurity, which has become a new computing discipline, with its own curricular guidelines (CSEC\n2017) developed by a Joint Task Force of the ACM, IEEE Computer Society, AIS and IFIP in 2017.\nMoreover, since 2013, other curricular recommendations for cybersecurity beyond CS2013 and CSEC\n2017 have been made. In the US, the National Security Agency recognizes institutions as Centers of\n255\nAcademic Excellence (CAE) in Cyber Defense and/or Cyber Operations if their cybersecurity programs\nmeet the respective CAE curriculum requirements. Additionally, the National Initiative for Cybersecurity\nEducation (NICE) of the US National Institute for Standards and Technologies (NIST) has developed\nand revised the Workforce Framework for Cybersecurity (NICE Workforce Framework), which identifies\ncompetencies (knowledge and skills) needed to perform tasks relevant to cybersecurity work roles. The\nEuropean Cybersecurity Skills Framework (ECSF) includes a standard ontology to describe\ncybersecurity tasks and roles, as well as addressing the cybersecurity personnel shortage in EU\nmember countries. Similarities and differences of these cybersecurity guidelines, viewed from the CS\nperspective, also informed the SEC knowledge area.\nBuilding on CS2013’s recognition of the pervasiveness of security in computer science, the CS2023\nSEC knowledge area focuses on ensuring that students develop a security mindset so that they are\nprepared for the continual changes occurring in computing. One useful addition is the knowledge unit\nfor security analysis, design, and engineering to support the concepts of security-by-design and\nprivacy-by-design.\nThe importance of computer science in ensuring the protection of future computing systems and\nsocietal critical infrastructure will continue to grow. Consequently, it is imperative that faculty teaching\ncomputer science incorporate the latest advances in security and privacy approaches to keep their\ncurriculum current.\nDifferences between CS2023 Security knowledge area and Cybersecurity\nCS2023’s SEC knowledge area focuses on those aspects of security, privacy, and related concepts\nimportant for computer science students. In comparison, CSEC 2017 characterizes similarities and\ndifferences in the cybersecurity book of knowledge using the disciplinary lenses of computer science,\ncomputer engineering, software engineering, information systems, information technology, and other\ndisciplines. In short, the major goal of the SEC knowledge area is to ensure that computer science\ngraduates can design and develop more secure code, ensure data security and privacy, and apply a\nsecurity mindset to their daily activities.\nProtecting what happens within the perimeter of a networked computer system is a core competency of\ncomputer science graduates. Although the computer science and cybersecurity knowledge units\noverlap, the demands upon cybersecurity graduates typically are to protect the perimeter. CSEC 2017\ndefines cybersecurity as a highly interdisciplinary field of study that covers eight areas (data, software,\ncomponent, connection, system, human, organizational, and societal security) and prepares its\nstudents for both technical and managerial roles in cybersecurity.\nThe first five CSEC 2017 areas are technical and have overlaps with the CS2023 SEC knowledge area,\nbut the intent of coverage is substantively different as computer science students bring to bear the core\ncompetencies described in all the 17 CS2023 knowledge areas. For instance, consider the SEC\nknowledge area’s Secure Coding knowledge unit. The computer science student will need to view this\nknowledge unit from a computer science lens, as an extension of the material covered in the SDF, SE,\nand PDC knowledge areas, while the Cybersecurity student will need to view software security in the\noverall context of diverse cybersecurity goals. These viewpoints are not totally distinct and have\n256\noverlaps, but thFFe lenses used to examine and present the content are different. There are similar\ncommonalities aii nd differences among CS2023 SEC knowledge units and corresponding CSEC 2017\ngg\nknowledge units.\nuu\nrr\nCore Hours\nee\n..\nDD\nKnowledgaae Unit CS Core KA Core\ntt\nFoundatioaan al Security 1 + 7 (DM, FPL, PDC, SDF, 7\nSS\nSE, OS)\nee\ncc\nSociety, Ethics, and the Profession 1 + 4 (SEP) 2\nuu\nrr\nSecure Coding 2 + 6 (FPL, SDF, SE) 5\nii\ntt\nCryptograyyp hy 1 + 8 (MSF) 4\n––\nSecurity ACCnalysis, Design, and Engineering 1 + 4 (MSF, SE) 8\nyy\nDigital Fobbrensics 0 6\nee\nSecurity Grrovernance 0 3\nss\nee\nTotal hours 6 35\ncc\nuu\nrr\nii\nThe SEC knowledge area requires approximately 28 hours of CS Core hours from the other knowledge\ntt\nareas, either to yyp rovide the basis or to complement its content. Of these, MSF-Discrete, MSF-\nProbability, andvv MSF-Statistics are likely to be relied upon extensively in all the SEC knowledge units,\nas are SDF-Funeedamentals, SDF-Algorithms, and SDF-Practices. The others are mentioned within each\nrr\nof the SEC knowledge units described below.\nss\nuu\nKnowledgess Units\nCC\nSS"
}