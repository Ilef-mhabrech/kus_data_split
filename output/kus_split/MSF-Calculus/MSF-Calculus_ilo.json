{
  "title": "MSF-Calculus",
  "Illustrative Learning Outcomes": {
    "KA Core": "1. Sequences, series, limits\na. Explain the difference between infinite sets and sequences.\nb. Explain the formal definition of a limit.\nc. Derive the limit for examples of sequences and series.\nd. Explain convergence and divergence.\ne. Apply L’Hospital’s rule and other approaches to resolving limits.\n2. Single-variable derivatives: definition, computation rules (chain rule etc.), derivatives of important\nfunctions, applications\na. Explain a derivative in terms of limits.\nb. Explain derivatives as functions.\nc. Perform elementary derivative calculations from limits.\nd. Apply sum, product, and quotient rules.\ne. Work through examples with important functions.\n3. Single-variable integration: definition, computation rules, integrals of important functions,\nfundamental theorem of calculus, definite vs indefinite, applications (including in probability)\na. Explain the definitions of definite and indefinite integrals.\nb. Apply integration rules to examples with important functions.\nc. Explore the use of the fundamental theorem of calculus.\nd. Apply integration to problems.\n4. Parametric and polar representations\na. Apply parametric representations of important curves.\nb. Apply polar representations.\n5. Taylor series\na. Derive Taylor series for some important functions.\nb. Apply the Taylor series to approximations.\n193\n6. Multivariate calculus: partial derivatives, gradient, chain-rule, vector valued functions, applications\nto optimization, convexity, global vs local minima.\na. Compute partial derivatives and gradients.\nb. Work through examples with vector-valued functions with gradient notation.\nc. Explain applications to optimization.\n7. ODEs: definition, Euler method, applications to simulation\na. Apply the Euler method to integration.\nb. Apply the Euler method to a single-variable differential equation.\nc. Apply the Euler method to multiple variables in an ODE.\nProfessional Dispositions\nWe focus on dispositions helpful to students learning mathematics.\n● Growth mindset. Perhaps the most important of the dispositions, students should be persuaded\nthat anyone can learn mathematics, certainly the subset foundational to CS, and that success is not\ndependent on innate ability.\n● Practice mindset. Students should be educated about the nature of “doing” mathematics and\nlearning through practice with problems as opposed to merely listening or observing demonstrations\nin the classroom.\n● Deferred gratification. Most students are likely to learn at least some mathematics from\nmathematics departments unfamiliar with computing applications; computing departments should\nacclimate the students to the notion of waiting to see computing applications. Many of the new\ngrowth areas such as AI or quantum computing can serve as motivation.\n● Persistence. Student perceptions are often driven by frustration with inability to solve hard\nproblems that they see some peers tackle seemingly effortlessly; computing departments should\nhelp promote the notion that eventual success through persistence is what matters.\n● Skepticism and inquiry. Students often look for “given formulas” as handed down by experts only\nto be memorized and used. Yet, a theoretical mindset and, more broadly, a scientific one, should\nfeature skepticism and a curiosity about how formulas are established.\nMathematics Requirements\nThe most important topics expected from students entering a computing program typically correspond\nto pre-calculus courses in high school.\nRequired:\n● Algebra and numeracy\no Numeracy: numbers, operations, types of numbers, fluency with arithmetic, exponent\nnotation, rough orders of magnitude, fractions, and decimals.\no Algebra: rules of exponents, solving linear or quadratic equations with one or two variables,\nfactoring, algebraic manipulation of expressions with multiple variables.\n● Precalculus\no Coordinate geometry: distances between points, areas of common shapes.\no Functions: function notation, drawing and interpreting graphs of functions.\n194\no Exponentials and logarithms: a general familiarity with the functions and their graphs.\no Trigonometry: familiarity with basic trigonometric functions and the unit circle.\nCourse Packaging Suggestions\nEvery department faces constraints in delivering content, which precludes merely requiring a long list of\ncourses covering every single desired topic. These constraints include content-area ownership, faculty\nsize, student preparation, and limits on the number of departmental courses a curriculum can require.\nWe list below some options for offering mathematical foundations, combinations of which might best fit\nany specific institution.\n● Traditional course offerings. With this approach, a computer science department can require\nstudents to take courses provided by mathematics departments in any of the five broad\nmathematical areas listed above.\n● A “Continuous Structures” analog of Discrete Structures. Many computer science departments\nnow offer courses that prepare students mathematically for AI and machine learning. Such courses\ncan combine just enough calculus, optimization, linear algebra, and probability; yet others may split\nlinear algebra into its own course. These courses have the advantage of motivating students with\ncomputing applications and including programming as pedagogy for mathematical concepts.\n● Integration into application courses. An application course, such as machine learning, can be\nspread across two courses, with the course sequence including the needed mathematical\npreparation taught just-in-time, or a single machine learning course can balance preparatory\nmaterial with new topics. This may have the advantage of mitigating turf issues and helping\nstudents see applications immediately after encountering mathematics.\n● Specific course adaptations. For nearly a century, physics and engineering needs have driven\nthe structure of calculus, linear algebra, and probability. Computer science departments can\ncollaborate with their colleagues in mathematics departments to restructure mathematics-offered\nsections in those areas that are driven by computer science applications. For example, calculus\ncould be reorganized to fit the needs of computing programs into two calculus courses, leaving a\nlater third calculus course for engineering and physics students.\nCommittee\nChair: Rahul Simha, The George Washington University, Washington DC, USA\nMembers:\n● Richard Blumenthal, Regis University, Denver, CO, USA\n● Marc Deisenroth, University College London, London, UK\n● MIkey Goldweber, Denison University, Granville, OH, USA\n● David Liben-Nowell, Carleton College, Northfield, MN, USA\n● Jodi Tims, Northeastern University, Boston, MA, USA\n195\nReferences\n1. ACM/IEEE-CS Joint Task Force on Computing Curricula. “Computing Science Curricula 2013.”\n(New York, USA: ACM Press and IEEE Computer Society Press, 2013).\n2. Richard D. De Veaux, Mahesh Agarwal, Maia Averett, Benjamin S. Baumer, Andrew Bray, Thomas\nC. Bressoud, Lance Bryant, Lei Z. Cheng, Amanda Francis, Robert Gould, Albert Y. Kim, Matt\nKretchmar, Qin Lu, Ann Moskol, Deborah Nolan, Roberto Pelayo, Sean Raleigh, Ricky J. Sethi,\nMutiara Sondjaja, Neelesh Tiruviluamala, Paul X. Uhlig, Talitha M. Washington, Curtis L. Wesley,\nDavid White, Ping Ye, Curriculum Guidelines for Undergraduate Programs in Data Science, Annual\nReview of Statistics and Its Application, 4, 1 (2017): 15-30.\n196\nNetworking and Communication (NC)\nPreamble\nNetworking and communication play a central role in interconnected computer systems that are\ntransforming the daily lives of billions of people. The public internet provides connectivity for networked\napplications that serve ever-increasing numbers of individuals and organizations around the world.\nComplementing the public sector, major proprietary networks leverage their global footprints to support\ncost-effective distributed computing, storage, and content delivery. Advances in satellite networks\nexpand connectivity to rural areas. Device-to-device communication underlies the emerging Internet of\nThings.\nThis knowledge area deals with key concepts in networking and communication, as well as their\nrepresentative instantiations in the internet and other computer networks. Besides the basic principles\nof switching and layering, the area at its core provides knowledge on naming, addressing, reliability,\nerror control, flow control, congestion control, domain hierarchy, routing, forwarding, modulation,\nencoding, framing, and access control. The area also covers knowledge units in network security and\nmobility, such as security threats, countermeasures, device-to-device communication, and multi-hop\nwireless networking. In addition to the fundamental principles, the area includes their specific realization\nof the Internet as well as hands-on skills in the implementation of networking and communication\nconcepts. Finally, the area comprises emerging topics such as network virtualization and quantum\nnetworking.\nAs the main learning outcome, learners develop a thorough understanding of the role and operation of\nnetworking and communication in networked computer systems. They learn how network structure and\ncommunication protocols affect the behavior of distributed applications. The area can be used to\neducate not only key principles but also their specific instantiations in the internet and equip the student\nwith hands-on implementation skills. While computer-system, networking, and communication\ntechnologies are advancing at a fast pace, the gained fundamental knowledge enables the student to\nreadily apply the concepts in new technological settings.\nChanges since CS2013\nCompared to the 2013 curricula, the knowledge area broadens its core focus to expand on reliability\nsupport, routing, forwarding, and single-hop communication. Due to the enhanced core, learners\nacquire a deeper understanding of the impact that networking and communication have on the behavior\nof distributed applications. Reflecting the increased importance of network security, the area adds a\nrespective knowledge unit as a new elective. To track the advancing frontiers in networking and\ncommunication knowledge, the social networking knowledge unit was removed and an emerging\nknowledge unit on topics, such as middleboxes, software-defined networks, and quantum networking,\nwas added. Other changes consist of redistributing all the topics from the old unit on resource allocation\namong other units to resolve overlap between knowledge units in the 2013 curricula.\n197\nCore Hours\nKnowledge Unit CS Core KA Core\nFundamentals 2.5 + 0.25 (SEP) + 0.25 (SF)\nNetworked Applications 3.5 + 0.25 (SEP) + 0.25\n(PDC)\nReliability Support 5.75 + 0.25 (SF)\nRouting And Forwarding 4\nSingle-Hop Communication 3\nMobility Support 4\nNetwork Security 2.25 + 0.5 (SEC) + 0.25\n(SEP)\nEmerging Topics 4\nTotal 7 24\nThe shared hours correspond to overlapping concepts that are covered from a networking perspective\nand are only counted here.\nKnowledge Units"
  }
}