{
  "title": "OS-Principles: Principles of Operating System",
  "CS Core": "1. Operating system software design and approaches (e.g., monolithic, layered, modular, micro-\nkernel, unikernel)\n2. Abstractions, processes, and resources\n3. Concept of system calls and links to application program interfaces (e.g., Win32, Java, Posix). (See\nalso: AR-Assembly)\n4. The evolution of the link between hardware architecture and the operating system functions\n5. Protection of resources means protecting some machine instructions/functions (See also: AR-\nAssembly)\nExample concepts:\na. Applications cannot arbitrarily access memory locations or file storage device addresses.\nb. Protection of coprocessors and network devices\n6. Leveraging interrupts from hardware level: service routines and implementations. (See also: AR-\nAssembly)\nExample concepts:\na. Timer interrupts for implementing time slices\nb. I/O interrupts for putting blocking threads to sleep without polling\n7. Concept of user/system state and protection, transition to kernel mode using system calls (See\nalso: AR-Assembly)\n8. Mechanism for invoking system calls, the corresponding mode and context switch and return from\ninterrupt (See also: AR-Assembly)\n9. Performance costs of context switches and associated cache flushes when performing process\nswitches in Spectre-mitigated environments."
}