{
  "title": "PDC-Algorithms: Algorithms",
  "CS Core": "1. Expressing and implementing algorithms in given languages and frameworks, to initiate activities\n(for example threads), use shared memory constructs, and channel, socket, and/or remote\nprocedure call APIs. (See also: FPL-Parallel).\na. Data parallel examples including map/reduce.\nb. Using channel, socket, and/or RPC APIs in a given language, with program control for\nsending (usually procedural) vs receiving. (usually reactive or RPC-based).\nc. Using locks, barriers, and/or synchronizers to maintain liveness without introducing races.\n2. Survey of common application domains across multicore, reactive, data parallel, cluster, cloud,\nopen distributed systems, and frameworks (with reference to the following table).\nCategory Typical Typical Typical Typical\nExecution agents Communication Algorithmic Engineering\nmechanisms domains goals\nMulticore Threads Shared memory, Resource Throughput,\nAtomics, locks management, latency,\ndata processing energy\nReactive Handlers, threads I/O Channels Services, real- Latency\ntime\nData parallel GPU, SIMD, Heterogeneous Linear algebra, Throughput,\n225\naccelerators, memory graphics, data energy\nhybrid analysis\nCluster Managed hosts Sockets, channels Simulation, data Throughput\nanalysis\nCloud Provisioned hosts Service APIs Web Scalability\napplications\nOpen Autonomous hosts Sockets, Data Fault tolerant Reliability\ndistributed stores data stores and\nservices"
}