{
  "title": "PDC-Coordination: Coordination",
  "CS Core": "1. Dependencies\na. Initiation or progress of one activity may be dependent on other activities, so as to avoid\nrace conditions, ensure termination, or meet other requirements\nb. Ensuring progress by avoiding dependency cycles, using monotonic conditions, removing\ninessential dependencies\n2. Control constructs and design patterns\na. Completion-based: Barriers, joins, including termination control\nb. Data-enabled: Queues, producer-consumer designs\nc. Condition-based: Polling, retrying, backoffs, helping, suspension, signaling, timeouts\nd. Reactive: Enabling and triggering continuations\n3. Atomicity\na. Atomic instructions, enforced local access orderings\nb. Locks and mutual exclusion; lock granularity\nc. Using locks in a specific language; maintaining liveness without introducing races\n222\nd. Deadlock avoidance: Ordering, coarsening, randomized retries; backoffs, encapsulation via\nlock managers\ne. Common errors: Failing to lock or unlock when necessary, holding locks while invoking\nunknown operations\nf. Avoiding locks: replication, read-only, ownership, and non-blocking constructions"
}