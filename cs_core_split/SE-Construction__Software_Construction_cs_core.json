{
  "title": "SE-Construction: Software Construction",
  "CS Core": "1. Practical small-scale testing (See also: SDF-Practices)\na. Unit testing\nb. Test-driven development – This is particularly valuable for students psychologically, as it is far\neasier to engage constructively with the challenge of identifying challenging inputs for a given\nAPI (edge cases, corner cases) a priori. If they implement first, the instinct is often to avoid\ntrying to crash their new creation, while a test-first approach gives them the intellectual\nsatisfaction of spotting the problem cases and then watching as more tests pass during the\ndevelopment process.\n2. Documentation (See also: SDF-Practices)\na. Interface documentation – describe interface requirements, potentially including (formal or\ninformal) contracts, pre and post conditions, invariants.\nb. Implementation documentation should focus on tricky and non-obvious pieces of code, whether\nbecause the code is using advanced language features, or the behavior of the code is complex.\n(Do not add comments that re-state common/obvious operations and simple language features.)\ni. Clarify dataflow, computation, etc., focusing on what the code is.\nii. Identify subtle/tricky pieces of code and refactor to be self-explanatory if possible or provide\nappropriate comments to clarify."
}